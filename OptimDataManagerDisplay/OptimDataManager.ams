## ams_version=1.0

LibraryModule OptimDataManagerDisplay {
	Prefix: odm;
	Interface: {
		data { spLinearSolveTerminationInfo, spNonLinearSolveTerminationInfo, spCurrentCase, 
		       spActiveFile, sListProjectPages, sListDMPages, p01SelectDMPagesNotToClose, 
		       spWizardPictureDisplay, procCloseAllPages, procReadFromExcel_odm, spBeginCalendar_odm, 
		       spEndCalendar_odm, sGranularityCalendar, epGranularitySelect, procInitCalendar, 
		       procValidateCalendar, procUpdateTimeDependentDataWithConstant, procUpdateTimeDependentDataWithGeneralData, 
		       procUpdateTimeDependentPages, procUpdateIsActive, sWebLink, spWebLink, epWebLinkSelect, 
		       procOpenWebLink, p01AlertMessageBeforeInitDisable, procCopyGeneralDataInTimeDependentData_gdm, 
		       procCopyGeneralDataInTimeDependentData_udm, procCopyFilterGeneralDataInTimeDependentData_gdm, 
		       procCopyFilterGeneralDataInTimeDependentData_udm, procForceActiveTimeDependentTo_1, 
		       procForceActiveTimeDependentTo_0, p01ReadOnlyInputFile, p01ReadOnlyCreateNewItem, 
		       p01ReadOnlyModifyTimeDependentPage, p01ReadOnlyModifyTimePage, p01UnlockRightModifyAdministratorData, 
		       procRightUserForDataManager, pTotalGeneralPower, pTotalGeneralPowerPerEnerCont, 
		       pColdboxAirTotal, sInputFlowNotZero, sOutputFlowNotZero, sColdboxGraphInputOutputNodeSelect, 
		       epColdboxGraphInputOutputNodeSelect, p01ColdboxGraphInputNodeSelect, p01ColdboxGraphOutputNodeSelect, 
		       epRM_TimeSelect1, epRM_TankNodeSelected1, epRM_TankNodeSelected2, epRM_TankNodeSelected3, 
		       epColorGraphProduct1, epColorGraphProduct2, epColorGraphProduct3, epRM_EnergyContractSelected3, 
		       epBoxSelect1, epArcSelect1, epArcSelect2, epArcSelect3, epArcSelect4, epNodeSelect1, 
		       epNodeSelect2, epNodeSelect3, epNodeSelect4, epInputFlowSelect1, epInputFlowSelect2, 
		       epInputFlowSelect3, epInputFlowSelect4, epOutputFlowSelect1, epOutputFlowSelect2, 
		       epOutputFlowSelect3, epOutputFlowSelect4, epOperatingModeElementSelect, epStatusModeElementSelect1, 
		       epStatusModeElementSelect2, epStatusModeElementSelect3, p01OperatingModeAllowedInversed, 
		       pSwitchingValueCal, p01StatusOfv01, sColdboxAllFlow, epColdboxAllAirHp, epColdboxAllAirMp, 
		       epColdboxAllAirTotal, epColdboxAllHpGox, epColdboxAllMpGox, epColdboxAllLpGox, 
		       epColdboxAllHpGan, epColdboxAllMpGan, epColdboxAllLpGan, epColdboxAllLin, 
		       epColdboxAllLox, epColdboxAllLar, epColdboxAllInternalLiquid, epColdboxAllRectifPower, 
		       epColdboxAllO2Recovery, epColdboxAllArRecovery, epColdboxAllAirTurbineLp, 
		       epColdboxAllGoxToWaste, epColdboxAllWasteO2, epColdboxAllWasteN2, epColdboxAllWaste, 
		       epColdboxAllSelect1, spColdboxAllSelect1, spColdboxAllSelect1Vent, spColdboxAllSelect1Min, 
		       spColdboxAllSelect1Max, epColdboxAllSelect2, spColdboxAllSelect2, spColdboxAllSelect2Vent, 
		       spColdboxAllSelect2Min, spColdboxAllSelect2Max, epColdboxAllSelect3_1, spColdboxAllSelect3_1, 
		       epColdboxAllSelect3_2, spColdboxAllSelect3_2, epColdboxAllSelect3_3, spColdboxAllSelect3_3, 
		       epColdboxAllSelect3_4, spColdboxAllSelect3_4, sColdboxNodeConnectionTypeInputs, 
		       sColdboxNodeConnectionTypeOutputs, epColdboxSelect, epColdboxNodeConnectionTypeInputSelect, 
		       epColdboxNodeTypeInputSelect, epColdboxNodeConnectionTypeOutputSelect, epColdboxNodeTypeOutputSelect, 
		       pColdboxAllFlow, pColdboxAllFlow_vent, pColdboxAllFlowMin, pColdboxAllFlowMax, 
		       sCompressorLiquefier, pPowerCompLique, pFlowCompLiqueMin, pFlowCompLiqueMax, 
		       epCompressorLiquefierSelect1, epCompressorLiquefierSelect2, epCompressorLiquefierSelect3, 
		       epCompressorLiquefierSelect4, epNodeSelect, spmultiplecasename, p01SelectionMultiCAseOk, 
		       p01SelectionMultiCaseNotOk, pNumberOfCasesSelected, sSelectedCaseFiles, procCheckMRM, 
		       p01UserboxHideButton, pLineSizeMenu, epReadOnlyColor, epSCADAColor, epColorDifferentSimulation, 
		       epColorAirCompressorRealModelized, epColorAirCompressorMax, epColorAirCompressorMin, 
		       epColorAirCompressorActualRunning, epColorAirCompressorActualAvailable, epBackgroundTextColor, 
		       epForegroundTextColor, epForegroundAltTextColor, epBackgroundChartColor, epForegroundChartColor, 
		       epBackgroundGraphColor, epBackgroundHeaderCheckboxColor, epBackgroundCheckboxColor, 
		       epForegroundCheckboxColor, epIdentifierCheckboxColor, epBackgroundButtonColor, 
		       epForegroundButtonColor, epBackgroundButtonRed, epBackgroundButtonGreen, epBackgroundButtonGray, 
		       epBackgroundCompositeTableColor, epForegroundCompositeTableColor, epSelectionCompositeTableColor, 
		       epIdentifierCompositeTableColor, epOxygenChartColor, epNitrogenChartColor, 
		       epColumnAreaBackgroundColor, epColumnAreaGridFocusBackgroundColor, epColumnAreaGridFocusTextColor, 
		       epColumnAreaHeaderBackgroundColor, epColumnAreaHeaderTextColor, epColumnAreaLineColor, 
		       epColumnAreaTextColor, epColumnAreaAgregatorsBackgroundColor, epColumnAreaAgregatorsTextColor, 
		       epContentBackgroundColor, epContentBarFillColor, epContentTextColor, epGeneralBackgroundColor, 
		       epGeneralBorderColor, epGridAreaAltBackgroundColor, epGridAreaBackgroundColor, 
		       epGridAreaGridFocusBackgroundColor, epGridAreaGridFocusTextColor, epGridAreaLineColor, 
		       epGridAreaSecondLineColor, epGridAreaSubHeaderColor, epGridAreaTextColor, 
		       epGridAreaAgregatorsBackgroundColor, epGridAreaAgregatorsTextColor, epGridFocusBackgroundColor, 
		       epGridFocusTextColor, epHeaderBackgroundColor, epHeaderTextColor, epIndexBackgroundColor, 
		       epIndexTextColor, epIndexAggregatorBackgroundColor, epOuterAreaLineColor, 
		       epOuterAreaBackgroundColor, epOuterAreaGridFocusBackgroundColor, epOuterAreaGridFocusTextColor, 
		       epOuterAreaHeaderBackgroundColor, epOuterAreaHeaderTextColor, epOuterAreaTextColor, 
		       epOuterAreaAgregatorsBackgroundColor, epOuterAreaAgregatorsTextColor, epRowAreaBackgroundColor, 
		       epRowAreaGridFocusBackgroundColor, epRowAreaGridFocusTextColor, epRowAreaHeaderBackgroundColor, 
		       epRowAreaHeaderTextColor, epRowAreaLineColor, epRowAreaTextColor, epRowAreaAgregatorsBackgroundColor, 
		       epRowAreaAgregatorsTextColor, epTableBackgroundColor, epTableForegroundColor, 
		       epTableSelectionColor, epTableDefaultTextColor, sIndexI, sIndexJ, pParameterA, 
		       spParameterB, procInitialize, procAddNewUserColors, procAssignPivotTableColorScheme, 
		       procSaveTemplateExcel, procCheckDataManagementStyle, procClearCurrentcase, 
		       spInfeasibleLinearSolveTerminationInfo, pTotalExtraPower, pBackupPowerPump }
	}
	DeclarationSection General_Declaration {
		StringParameter spLinearSolveTerminationInfo {
			Definition: {
				"\n Solver Status : " + ulom::mpUserLinearModel.SolverStatus
				+ "\n Program Status : " + ulom::mpUserLinearModel.ProgramStatus 
				+ "\n Solution Time : " + round(ulom::mpUserLinearModel.SolutionTime,3)
				!+ "\n Objectif : " + round(ulom::mpUserLinearModel.Objective)
				!+ " - Incumbent : " + round(ulom::mpUserLinearModel.Incumbent)
				+ "\n Best Bound : " + round(ulom::mpUserLinearModel.objective)   ! BestBound
				+ " - Gap : " + round((ulom::mpUserLinearModel.Incumbent - ulom::mpUserLinearModel.BestBound) /$ ulom::mpUserLinearModel.Incumbent * 100,2) + "%"
			}
		}
		StringParameter spNonLinearSolveTerminationInfo {
			Definition: {
				if uom::mpUserModel.SolverStatus = "Unknown" then
					"AOA solver used"
					+ "\n No information"
				else
					"Solver Status : " + uom::mpUserModel.SolverStatus
					+ "\n Program Status : " + uom::mpUserModel.ProgramStatus
					+ "\n Solution Time : " + round(uom::mpUserModel.SolutionTime,3)
					!+ "\n Objectif : " + round(uom::mpUserModel.Objective)
					!+ " - Incumbent : " + round(uom::mpUserModel.Incumbent)
					! + "\n Best Bound : " + round(uom::mpUserModel.BestBound)
					! + " - Gap : " + round((uom::mpUserModel.Incumbent - uom::mpUserModel.BestBound) / uom::mpUserModel.Incumbent * 100,2) + "%"
				endif
			}
		}
		StringParameter spInfeasibleLinearSolveTerminationInfo {
			Definition: {
				"\n Solver Status : " + ulom::mpUserLinearModelWithViolations.SolverStatus
				+ "\n Program Status : " + ulom::mpUserLinearModelWithViolations.ProgramStatus 
				+ "\n Solution Time : " + round(ulom::mpUserLinearModelWithViolations.SolutionTime,3)
				!+ "\n Objectif : " + round(ulom::mpUserLinearModelWithViolations.Objective)
				!+ " - Incumbent : " + round(ulom::mpUserLinearModelWithViolations.Incumbent)
				+ "\n Best Bound : " + round(ulom::mpUserLinearModelWithViolations.BestBound)
				+ " - Gap : " + round((ulom::mpUserLinearModelWithViolations.Incumbent - ulom::mpUserLinearModelWithViolations.BestBound) /$ ulom::mpUserLinearModelWithViolations.Incumbent * 100,2) + "%"
			}
		}
		StringParameter spInfeasibleNonLinearSolveTerminationInfo {
			Definition: {
				if uom::mpUserModelWithViolations.SolverStatus = "Unknown" then
					"AOA solver used"
					+ "\n No information"
				else
					"Solver Status : " + uom::mpUserModelWithViolations.SolverStatus
					+ "\n Program Status : " + uom::mpUserModelWithViolations.ProgramStatus
					+ "\n Solution Time : " + round(uom::mpUserModelWithViolations.SolutionTime,3)
					!+ "\n Objectif : " + round(uom::mpUserModelWithViolations.Objective)
					!+ " - Incumbent : " + round(uom::mpUserModelWithViolations.Incumbent)
					! + "\n Best Bound : " + round(uom::mpUserModelWithViolations.BestBound)
					! + " - Gap : " + round((uom::mpUserModelWithViolations.Incumbent - uom::mpUserModelWithViolations.BestBound) / uom::mpUserModelWithViolations.Incumbent * 100,2) + "%"
				endif
			}
		}
		StringParameter spCurrentCase {
			Definition: casefileurl(currentcase);
		}
		StringParameter spActiveFile {
			Definition: {
				if spcurrentcase="" then
					gdm::spExcelFileDisplay
				else
					spcurrentcase
				endif
			}
		}
	}
	DeclarationSection Infeasibility;
	Section PageManagement {
		DeclarationSection ApplicationSelected {
			Set sOptimSuiteApplications {
				Index: iOptimSuiteApplication;
				OrderBy: iOptimSuiteApplication;
				Definition: {
					{ 'CoreEngine', 'LimOptim' }
				}
			}
			ElementParameter epOptimSuiteCoreEngine {
				Range: sOptimSuiteApplications;
				Definition: stringtoelement(sOptimSuiteApplications, "CoreEngine");
			}
			ElementParameter epOptimSuiteLimOptim {
				Range: sOptimSuiteApplications;
				Definition: stringtoelement(sOptimSuiteApplications,"LimOptim");
			}
			ElementParameter epOptimSuiteApplicationSelected {
				Range: sOptimSuiteApplications;
			}
		}
		DeclarationSection PageManagement_Declaration {
			Set sListProjectPages {
				Index: iListProjectPage;
			}
			Set sListDMPages {
				SubsetOf: sListProjectPages;
				Index: iListDMPage;
				OrderBy: iListDMPage;
			}
			Parameter p01SelectDMPagesNotToClose {
				IndexDomain: iListDMPage;
				Range: binary;
			}
			StringParameter spWizardPictureDisplay {
				Definition: {
					if gdm::spWizardPicture<>"" then
						"Pictures\\\\" + gdm::spWizardPicture
					else
						"Pictures\\\\Example wizard.jpg"
					endif
				}
			}
		}
		Procedure procCloseAllPages {
			Body: {
				PageGetAll(sListProjectPages);
				sListDMPages := { odm::iListProjectPage | SubString(odm::iListProjectPage,1,3) = "odm" }
					- data {'odm::MenuTemplates', 'odm::Dev Example' };
				p01SelectDMPagesNotToClose(iListDMPage) :=0;
				p01SelectDMPagesNotToClose('odm::MainPage') :=1;
				p01SelectDMPagesNotToClose('odm::DataManager_Menu') :=1;
				p01SelectDMPagesNotToClose('odm::Result_Manager') :=1;
				
				pageopen("DM_SelectPagesNotToclose");
				
				for odm::iListDMPage in sListDMPages do
					if p01SelectDMPagesNotToClose(iListDMPage) = 0 then
						PageClose(odm::iListDMPage);
					endif;
					if p01SelectDMPagesNotToClose(iListDMPage) = 1 then
						PageOpen(odm::iListDMPage);
					endif;
				endfor;
			}
		}
	}
	Section Procedure_Update {
		Procedure procReadFromExcel_odm {
			Body: {
				
				udm::procEmptyAllData_udm();
				uom::procClear_uom();
				udm::procReadFromExcelButton_udm();
				udm::procCheckData_udm();
				procInitCalendar();
				procClearCurrentcase;
				! pageopen('DM_LogCheck');
			}
		}
		DeclarationSection Calendar_Declaration {
			StringParameter spBeginCalendar_odm {
				Text: "Begin Date";
				Definition: {
					!"2016-01-01 00:00:00"
				}
			}
			StringParameter spEndCalendar_odm {
				Text: "End date";
				Definition: {
					!"2016-12-31 23:59:59"
				}
			}
			Set sGranularityCalendar {
				Definition: data { 'second', 'minute', 'hour', 'day', 'week', 'month', 'year' };
			}
			ElementParameter epGranularitySelect {
				Text: "Granularity";
				Range: sGranularityCalendar;
				Default: 'hour';
			}
		}
		Procedure procInitCalendar {
			Body: {
				spBeginCalendar_odm := gdm::spBeginCalendar;
				spEndCalendar_odm := gdm::spEndCalendar;
				epGranularitySelect := stringtoelement(sGranularityCalendar, gdm::spGranularityCalendar);
			}
		}
		Procedure procValidateCalendar {
			Body: {
				if spBeginCalendar_odm="" or spEndCalendar_odm="" then
					spBeginCalendar_odm := gdm::spBeginCalendar;
					spEndCalendar_odm := gdm::spEndCalendar;
				endif;
				
				if spEndCalendar_odm >= spBeginCalendar_odm then
					gdm::spBeginCalendar := spBeginCalendar_odm;
					gdm::spEndCalendar := spEndCalendar_odm;
					gdm::spGranularityCalendar := epGranularitySelect;
				
					!Initialization Time dependent Data
					gdm::procInitializeTimeDependentData();
					udm::procInitializeTimeDependentData_udm();
				else
					dialogmessage("Begin date after end date");
					spBeginCalendar_odm := gdm::spBeginCalendar;
					spEndCalendar_odm := gdm::spEndCalendar;
				endif;
				
				spBeginCalendar_odm := gdm::spBeginCalendar;
				spEndCalendar_odm := gdm::spEndCalendar;
			}
		}
		Procedure procUpdateTimeDependentDataWithConstant {
			Body: {
				
				
				! procUpdateTimeDependentDataWithGeneralData();  ! This procedure copy the data from the general parameter to the parameter Time Dependent in order to write them in the data base (or Excel)
				
				gdm::procInitializeTimeDependentData();
				udm::procInitializeTimeDependentData_udm();
			}
		}
		Procedure procUpdateTimeDependentDataWithGeneralData {
			Body: {
				!procCopyGeneralDataInTimeDependentData_udm();
				!procCopyGeneralDataInTimeDependentData_gdm();
				
				procCopyFilterGeneralDataInTimeDependentData_gdm();
				procCopyFilterGeneralDataInTimeDependentData_udm();
			}
		}
		Procedure procUpdateTimeDependentPages {
			Body: {
				! to be defined if necessary
				
				gdm::procInitializeTimeDependentData();
				udm::procInitializeTimeDependentData_udm();
			}
		}
		Procedure procUpdateIsActive;
		Section Procedure_for_WebLink {
			Set sWebLink {
				Index: iWebLink;
				Definition: {
					{ 'OptimSuite', 'Wizard', 'OEMT', 'Intro', 'Formulas', 'Module1', 'Module2', 'Module3', 'Module4', 'Module5', 'Module6',
					  'DataManager', 'ResultManager', 'MultiResultManager', 'Infeasibility',
					  'Calendar', 'Compressor', 'Liquefier', 'Pipe', 'Valve', 'Backup', 'Tank', 'Buffer', 'InputFlow', 'OutputFlow' }
				}
			}
			StringParameter spWebLink {
				IndexDomain: iWebLink;
				Definition: {
					if iWebLink = 'OptimSuite' then "https://sites.google.com/airliquide.com/sio-optim-core-engine/menu"
					elseif iWebLink = 'Wizard' then "https://d1b005egjr0t23.cloudfront.net/"
					elseif iWebLink = 'OEMT' then "https://sio-optim-efficiency-modeling-test.apps.airliquide.com/app/01_OEMT"
					elseif iWebLink = 'Formulas' then "https://docs.google.com/document/d/1vJMcR_IdbduDujTYz-mQ1rNHW0sjl4dRkJZW1eQxH38/edit#heading=h.gjdgxs" 
					elseif iWebLink = "Intro" then "https://docs.google.com/presentation/d/1SGg4UBIFZPUrjgT1oHmtR5-RkXvzUflVLNoAv0dDCXI/edit#slide=id.g1057bc273f4_0_1020"
					elseif iWebLink = "Module1" then "https://docs.google.com/presentation/d/1if8A0ZJV37hJXahg6iEQrtwYKzxxSmMZaooQoshLpds/edit#slide=id.gfc40cbc39_0_1"
					elseif iWebLink = "Module2" then "https://docs.google.com/presentation/d/1aLW2WSX2goa7pkfb-Z-Q0P-wbOZ_ID9Q_ovhM6_lTvc/edit#slide=id.gfc40cbc39_0_1"
					elseif iWebLink = "Module3" then "https://docs.google.com/presentation/d/1otT6RGX2ZK4zBclP23kiVLcZBZY69_NRY4tWfCABgUw/edit#slide=id.g19d5076772_0_128"
					elseif iWebLink = "Module4" then "https://docs.google.com/presentation/d/1OmgNGdCcRAShDQcd2wxkhc0hFhEMIm3v-UpX80rguWU/edit#slide=id.gfc40cbc39_0_1"
					elseif iWebLink = "Module5" then "https://docs.google.com/presentation/d/14pf9aPTv8y_Oha9_lWc8Xjm24qwd7V_jbuVTvZSpvPY/edit#slide=id.g19d5076772_0_128"
					elseif iWebLink = "Module6" then "https://docs.google.com/presentation/d/1mvPUhnb1V3lthrNaerLgG2kPjndCO5ChyTC2jppPf1s/edit?usp=sharing"
					elseif iWebLink = "DataManager" then "https://docs.google.com/document/d/1JJDzWo9soCYtDhbcwAjvVA_zsG0FY9D6tYFbM-ytqOw/edit?usp=sharing"
					elseif iWebLink = "ResultManager" then "https://docs.google.com/document/d/1Vl9aIYDw3cnFIIY_3N2vBDMLDSF1myPbhheUa0GD-U0/edit?usp=sharing"
					elseif iWebLink = "MultiResultManager" then "https://docs.google.com/document/d/1YdQZK8tkmMMIm68Tu0yxFov3jjAbP-FdXsySLZj_NsQ/edit?usp=sharing"
					elseif iWebLink = "Infeasibility" then "https://docs.google.com/document/d/1hChQ4jyOSkMAp7BZdQnpxdIMhztQddwXUpSG7lVJxNc/edit?usp=sharing"
					elseif iWebLink = "Calendar" then "https://docs.google.com/presentation/d/1mvPUhnb1V3lthrNaerLgG2kPjndCO5ChyTC2jppPf1s/edit#slide=id.g2a99aabaa8_0_190"
					elseif iWebLink = "Compressor" then "https://docs.google.com/presentation/d/1aLW2WSX2goa7pkfb-Z-Q0P-wbOZ_ID9Q_ovhM6_lTvc/edit#slide=id.g2affc7e83c_2_16"
					elseif iWebLink = "Liquefier" then "https://docs.google.com/presentation/d/1OmgNGdCcRAShDQcd2wxkhc0hFhEMIm3v-UpX80rguWU/edit#slide=id.g2affc7e83c_2_16"
					elseif iWebLink = "Pipe" then "https://docs.google.com/presentation/d/1aLW2WSX2goa7pkfb-Z-Q0P-wbOZ_ID9Q_ovhM6_lTvc/edit#slide=id.g107469c5013_0_354"
					elseif iWebLink = "Valve" then "https://docs.google.com/presentation/d/1aLW2WSX2goa7pkfb-Z-Q0P-wbOZ_ID9Q_ovhM6_lTvc/edit#slide=id.g2affc7e83c_2_22"
					elseif iWebLink = "Backup" then "https://docs.google.com/presentation/d/1OmgNGdCcRAShDQcd2wxkhc0hFhEMIm3v-UpX80rguWU/edit#slide=id.g11225b4bc8a_1_144"
					elseif iWebLink = "Tank" then "https://docs.google.com/presentation/d/1OmgNGdCcRAShDQcd2wxkhc0hFhEMIm3v-UpX80rguWU/edit#slide=id.g2affc7e83c_2_22"
					elseif iWebLink = "Buffer" then "https://docs.google.com/presentation/d/1OmgNGdCcRAShDQcd2wxkhc0hFhEMIm3v-UpX80rguWU/edit#slide=id.g2affc7e83c_2_22"
					elseif iWebLink = "InputFlow" then "https://docs.google.com/presentation/d/1if8A0ZJV37hJXahg6iEQrtwYKzxxSmMZaooQoshLpds/edit#slide=id.g10580f7d342_0_15"
					elseif iWebLink = "OutputFlow" then "https://docs.google.com/presentation/d/1if8A0ZJV37hJXahg6iEQrtwYKzxxSmMZaooQoshLpds/edit#slide=id.g10580f7d342_0_15"
					endif
				}
			}
			ElementParameter epWebLinkSelect {
				Range: sWebLink;
			}
			Procedure procOpenWebLink {
				Body: {
					OpenDocument( spWebLink( epWebLinkSelect ) );
				}
			}
		}
	}
	Section Declaration_Time_Dependent_Parameters {
		DeclarationSection Time_Dependent_Declaration {
			Parameter p01AlertMessageBeforeInitDisable {
				Default: 0;
			}
		}
		Procedure procCopyGeneralDataInTimeDependentData_gdm {
			Body: {
				!!!! This procedure copy the data from the general parameter to the parameter Time Dependent in order to write them in the data base (or Excel) !!!!!
				
				! Pressure control
				gdm::pPressureControlNodeSetpointTimeDependent(gdm::iPressureControlNode,gdm::iTime) := gdm::pPressureControlNodeSetpoint(gdm::iPressureControlNode,gdm::iTime);
				gdm::p01PressureControlNodeSetPointActiveTimeDependent(gdm::iPressureControlNode,gdm::iTime) := 1;
				
				! Backup
				gdm::pBackupMinFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMinFlow(gdm::iBackupArc,gdm::iTime);
				gdm::pBackupMaxFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMaxFlow(gdm::iBackupArc,gdm::iTime);
				gdm::pBackupMinPositiveRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMinPositiveRateChangeFlow(gdm::iBackupArc,gdm::iTime);
				gdm::pBackupMaxPositiveRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMaxPositiveRateChangeFlow(gdm::iBackupArc,gdm::iTime);
				gdm::pBackupMinNegativeRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMinNegativeRateChangeFlow(gdm::iBackupArc,gdm::iTime);
				gdm::pBackupMaxNegativeRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMaxNegativeRateChangeFlow(gdm::iBackupArc,gdm::iTime);
				gdm::pBackupMinStayTimeSteadyStateTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMinStayTimeSteadyState(gdm::iBackupArc,gdm::iTime);
				gdm::p01BackupActiveTimeDependent(gdm::iBackupArc,gdm::iTime) := 1;
				
				! Box
				gdm::pBoxMinFlowTimeDependent(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) := gdm::pBoxMinFlow(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime);
				gdm::pBoxMaxFlowTimeDependent(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) := gdm::pBoxMaxFlow(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime);
				gdm::pBoxMinPositiveRateChangeFlowTimeDependent(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) := gdm::pBoxMinPositiveRateChangeFlow(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime);
				gdm::pBoxMaxPositiveRateChangeFlowTimeDependent(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) := gdm::pBoxMaxPositiveRateChangeFlow(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime);
				gdm::pBoxMinNegativeRateChangeFlowTimeDependent(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) := gdm::pBoxMinNegativeRateChangeFlow(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime);
				gdm::pBoxMaxNegativeRateChangeFlowTimeDependent(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) := gdm::pBoxMaxNegativeRateChangeFlow(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime);
				gdm::pboxMinStayTimeSteadyStateTimeDependent(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) := gdm::pBoxMinStayTimeSteadyStateFlow(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime);
				gdm::p01BoxFlowActiveTimeDependent(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) := 1;
				
				! Coldbox
				gdm::pColdboxMinInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMinInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
				gdm::pColdboxMaxInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMaxInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
				gdm::pColdboxMinPositiveRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMinPositiveRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
				gdm::pColdboxMaxPositiveRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMaxPositiveRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
				gdm::pColdboxMinNegativeRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMinNegativeRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
				gdm::pColdboxMaxNegativeRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMaxNegativeRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
				gdm::pColdboxMinStayTimeSteadyStateTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMinStayTimeSteadyStateInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
				gdm::p01ColdboxFlowActiveTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 1;
				
				! Compressor
				gdm::pCompressorMinFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMinFlow(gdm::iCompressorArc,gdm::iTime);
				gdm::pCompressorMaxFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMaxFlow(gdm::iCompressorArc,gdm::iTime);
				gdm::pCompressorMinPositiveRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMinPositiveRateChangeFlow(gdm::iCompressorArc,gdm::iTime);
				gdm::pCompressorMaxPositiveRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMaxPositiveRateChangeFlow(gdm::iCompressorArc,gdm::iTime);					      
				gdm::pCompressorMinNegativeRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMinNegativeRateChangeFlow(gdm::iCompressorArc,gdm::iTime);
				gdm::pCompressorMaxNegativeRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMaxNegativeRateChangeFlow(gdm::iCompressorArc,gdm::iTime);
				gdm::pCompressorMinStayTimeSteadyStateTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMinStayTimeSteadyState(gdm::iCompressorArc,gdm::iTime);
				gdm::pCompressorMaxPowerTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMaxPower(gdm::iCompressorArc,gdm::iTime);
				gdm::p01CompressorActiveTimeDependent(gdm::iCompressorArc,gdm::iTime) := 1;
				
				! Cooling Tower
				gdm::pCoolingTowerTemperatureTimeDependent(gdm::iCoolingTower,gdm::iTime) := gdm::pCoolingTowerTemperature(gdm::iCoolingTower,gdm::iTime); 
				gdm::p01CoolingTowerTemperatureActiveTimeDependent(gdm::iCoolingTower,gdm::iTime) := 1;
				
				! Output Flow
				gdm::pOutputFlowNodeFixedTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowFixed(gdm::iOutputFlowNode,gdm::iTime);
				gdm::pOutputFlowNodeMinFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMinFlow(gdm::iOutputFlowNode,gdm::iTime);
				gdm::pOutputFlowNodeMaxFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMaxFlow(gdm::iOutputFlowNode,gdm::iTime);
				gdm::pOutputFlowNodeMinPositiveRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMinPositiveRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime);
				gdm::pOutputFlowNodeMaxPositiveRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMaxPositiveRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime); 
				gdm::pOutputFlowNodeMinNegativeRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMinNegativeRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime);
				gdm::pOutputFlowNodeMaxNegativeRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMaxNegativeRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime);
				gdm::pOutputFlowNodeMinStayTimeSteadyStateTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMinStayTimeSteadyState(gdm::iOutputFlowNode,gdm::iTime);
				gdm::pOutputFlowNodeValuePerUnitTimeDependent(gdm::iOutputFlowNode, gdm::iTime) := gdm::pOutputFlowNodeValuePerUnit(gdm::iOutputFlowNode, gdm::iTime);
				gdm::p01OutputFlowNodeActiveTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 1;
				
				! Input Flow
				gdm::pInputFlowNodeFixedTimeDependent(gdm::iInputFlowNode, gdm::iTime) := gdm::pInputFlowNodeFixed(gdm::iInputFlowNode, gdm::iTime);
				gdm::pInputFlowNodeMinFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMinFlow(gdm::iInputFlowNode,gdm::iTime);
				gdm::pInputFlowNodeMaxFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMaxFlow(gdm::iInputFlowNode,gdm::iTime);
				gdm::pInputFlowNodeCostPerUnitTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeCostPerUnit(gdm::iInputFlowNode,gdm::iTime);
				gdm::pInputFlowNodeMinPositiveRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMinPositiveRateChangeFlow(gdm::iInputFlowNode,gdm::iTime);
				gdm::pInputFlowNodeMaxPositiveRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMaxPositiveRateChangeFlow(gdm::iInputFlowNode,gdm::iTime);
				gdm::pInputFlowNodeMinNegativeRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMinNegativeRateChangeFlow(gdm::iInputFlowNode,gdm::iTime);
				gdm::pInputFlowNodeMaxNegativeRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMaxNegativeRateChangeFlow(gdm::iInputFlowNode,gdm::iTime);
				gdm::pInputFlowNodeMinStayTimeSteadyStateTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMinStayTimeSteadyState(gdm::iInputFlowNode,gdm::iTime);
				gdm::p01InputFlowNodeActiveTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 1;
				
				! Liquefiers
				gdm::pLiquefierMinFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMinFlow(gdm::iLiquefierArc,gdm::iTime);
				gdm::pLiquefierMaxFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMaxFlow(gdm::iLiquefierArc,gdm::iTime);
				gdm::pLiquefierMinPositiveRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMinPositiveRateChangeFlow(gdm::iLiquefierArc,gdm::iTime);
				gdm::pLiquefierMaxPositiveRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMaxPositiveRateChangeFlow(gdm::iLiquefierArc,gdm::iTime);
				gdm::pLiquefierMinNegativeRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMinNegativeRateChangeFlow(gdm::iLiquefierArc,gdm::iTime);
				gdm::pLiquefierMaxNegativeRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMaxNegativeRateChangeFlow(gdm::iLiquefierArc,gdm::iTime);
				gdm::pLiquefierMinStayTimeSteadyStateTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMinStayTimeSteadyState(gdm::iLiquefierArc,gdm::iTime);
				gdm::pLiquefierMaxPowerTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMaxPower(gdm::iLiquefierArc,gdm::iTime);
				gdm::p01LiquifierActiveTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 1;
				
				! Plant
				gdm::pEnergyContractCostTimeDependent(gdm::iEnergyContract,gdm::iTime) := gdm::pEnergyContractCost(gdm::iEnergyContract,gdm::iTime);
				gdm::p01EnergyContractActiveTimeDependent(gdm::iEnergyContract,gdm::iTime) := 1;
				
				! Tanks
				gdm::pTankMinLevelTimeDependent(gdm::iTankNode,gdm::iTime) := gdm::pTankMinLevel(gdm::iTankNode,gdm::iTime);
				gdm::pTankMaxLevelTimeDependent(gdm::iTankNode,gdm::iTime) := gdm::pTankMaxLevel(gdm::iTankNode,gdm::iTime);
				gdm::p01TankEnableLevelConstraintsTimeDependent(gdm::iTankNode,gdm::iTime) := gdm::p01TankEnableLevelConstraints(gdm::iTankNode,gdm::iTime);
				gdm::p01TankLevelActiveTimeDependent(gdm::iTankNode,gdm::iTime) := 1;
				
				! Buffers
				gdm::pBufferMinPressureTimeDependent(gdm::iBufferNode, gdm::iTime) := gdm::pBufferMinPressure(gdm::iBufferNode, gdm::iTime);
				gdm::pBufferMaxPressureTimeDependent(gdm::iBufferNode, gdm::iTime) := gdm::pBufferMaxPressure(gdm::iBufferNode, gdm::iTime);
				gdm::p01BufferActiveTimeDependent(gdm::iBufferNode, gdm::iTime) := 1;
				
				! Valves
				gdm::pValveSetpointTimeDependent(gdm::iValveArc,gdm::iTime) := gdm::pValveSetPoint(gdm::iValveArc,gdm::iTime);
				gdm::epValveControlModeTimeDependent(gdm::iValveArc,gdm::iTime) := gdm::epValveControlMode(gdm::iValveArc,gdm::iTime);
				gdm::p01ValveActiveTimeDependent(gdm::iValveArc,gdm::iTime) := 1;
				
				! Status Element
				gdm::epStatusElementTimeDependent(gdm::iStatusModeElement, gdm::iTime) := gdm::epStatusElement(gdm::iStatusModeElement, gdm::iTime);
				gdm::p01StatusElementActiveTimeDependent(gdm::iStatusModeElement, gdm::iTime) := 1;
				
				! Operating Modes
				gdm::p01OperatingModeAllowedTimeDependent(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime) := gdm::p01OperatingModeAllowed(gdm::iOperatingModeElement,gdm::iOperatingMode, gdm::iTime);
				gdm::p01OperatingModeActiveTimeDependent(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime) := 1;
				
				! Switchable Element
				gdm::epOperatingModeForcedTimeDependent(gdm::iOperatingModeElement, gdm::iTime) := gdm::epOperatingModeForced(gdm::iOperatingModeElement, gdm::iTime);
				gdm::p01OperatingModeElementActiveTimeDependent(gdm::iOperatingModeElement, gdm::iTime) := 1;
			}
		}
		Procedure procCopyGeneralDataInTimeDependentData_udm {
			Body: {
				!!!! This procedure copy the data from the general parameter to the parameter Time Dependent in order to write them in the data base (or Excel) !!!!!
				
				! User Parameter
				! udm::pUserParameterTimeDependent(gdm::iTime) := udm::pUserParameter(gdm::iTime)
				! udm::p01TimeDependentUserParameter(gdm::iTime) := 1;
				!
			}
			Comment: {
				"udm::epGfCycleControlMode(gdm::iColdbox,gdm::iTime) := udm::epGfCycleControlModeConstant(gdm::iColdbox)*(1-udm::p01TimeDependentColdboxActive(gdm::iColdbox,gdm::iTime)) +
									  udm::epGfCycleControlModeTime(gdm::iColdbox,gdm::iTime)*udm::p01TimeDependentColdboxActive(gdm::iColdbox,gdm::iTime);"
			}
		}
		Procedure procCopyFilterGeneralDataInTimeDependentData_gdm {
			Body: {
				!!!! This procedure copy the data from the general parameter to the parameter Time Dependent in order to write them in the data base (or Excel) !!!!!
				
				! Pressure control
				for (gdm::iPressureControlNode,gdm::iTime) do
					if gdm::pPressureControlNodeSetpoint(gdm::iPressureControlNode,gdm::iTime) = gdm::pPressureControlNodeSetpointConstant(gdm::iPressureControlNode)
					then
						gdm::pPressureControlNodeSetpointTimeDependent(gdm::iPressureControlNode,gdm::iTime) := 0;
						gdm::p01PressureControlNodeSetPointActiveTimeDependent(gdm::iPressureControlNode,gdm::iTime) := 0;
					else
						gdm::pPressureControlNodeSetpointTimeDependent(gdm::iPressureControlNode,gdm::iTime) := gdm::pPressureControlNodeSetpoint(gdm::iPressureControlNode,gdm::iTime);
						gdm::p01PressureControlNodeSetPointActiveTimeDependent(gdm::iPressureControlNode,gdm::iTime) := 1;
					endif;
				endfor;
				
				
				! Backup
				for (gdm::iBackupArc,gdm::iTime) do
					if gdm::pBackupMinFlow(gdm::iBackupArc,gdm::iTime) = gdm::pBackupMinFlowConstant(gdm::iBackupArc)
						and gdm::pBackupMaxFlow(gdm::iBackupArc,gdm::iTime) = gdm::pBackupMaxFlowConstant(gdm::iBackupArc)
						and gdm::pBackupMinPositiveRateChangeFlow(gdm::iBackupArc,gdm::iTime) = gdm::pBackupMinPositiveRateChangeFlowConstant(gdm::iBackupArc)
						and gdm::pBackupMaxPositiveRateChangeFlow(gdm::iBackupArc,gdm::iTime) = gdm::pBackupMaxPositiveRateChangeFlowConstant(gdm::iBackupArc)
						and gdm::pBackupMinNegativeRateChangeFlow(gdm::iBackupArc,gdm::iTime) = gdm::pBackupMinNegativeRateChangeFlowConstant(gdm::iBackupArc)
						and gdm::pBackupMaxNegativeRateChangeFlow(gdm::iBackupArc,gdm::iTime) = gdm::pBackupMaxNegativeRateChangeFlowConstant(gdm::iBackupArc)
						and gdm::pBackupMinStayTimeSteadyState(gdm::iBackupArc,gdm::iTime) = gdm::pBackupMinStayTimeSteadyStateConstant(gdm::iBackupArc)
					then
						gdm::pBackupMinFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := 0;
						gdm::pBackupMaxFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := 0;
						gdm::pBackupMinPositiveRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := 0;
						gdm::pBackupMaxPositiveRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := 0;
						gdm::pBackupMinNegativeRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := 0;
						gdm::pBackupMaxNegativeRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := 0;
						gdm::pBackupMinStayTimeSteadyStateTimeDependent(gdm::iBackupArc,gdm::iTime) := 0;
						gdm::p01BackupActiveTimeDependent(gdm::iBackupArc,gdm::iTime) := 0;
					else
						gdm::pBackupMinFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMinFlow(gdm::iBackupArc,gdm::iTime);
						gdm::pBackupMaxFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMaxFlow(gdm::iBackupArc,gdm::iTime);
						gdm::pBackupMinPositiveRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMinPositiveRateChangeFlow(gdm::iBackupArc,gdm::iTime);
						gdm::pBackupMaxPositiveRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMaxPositiveRateChangeFlow(gdm::iBackupArc,gdm::iTime);
						gdm::pBackupMinNegativeRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMinNegativeRateChangeFlow(gdm::iBackupArc,gdm::iTime);
						gdm::pBackupMaxNegativeRateChangeFlowTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMaxNegativeRateChangeFlow(gdm::iBackupArc,gdm::iTime);
						gdm::pBackupMinStayTimeSteadyStateTimeDependent(gdm::iBackupArc,gdm::iTime) := gdm::pBackupMinStayTimeSteadyState(gdm::iBackupArc,gdm::iTime);
						gdm::p01BackupActiveTimeDependent(gdm::iBackupArc,gdm::iTime) := 1;
					endif;
				endfor;
				
				! Box Flow
				for (gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) do
					if gdm::pBoxMinFlow(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) = gdm::pBoxMinFlowConstant(gdm::iBox,gdm::iBoxNodeConnectionType)
						and gdm::pBoxMaxFlow(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) = gdm::pBoxMaxFlowConstant(gdm::iBox,gdm::iBoxNodeConnectionType)
						and gdm::pBoxMinPositiveRateChangeFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) = gdm::pBoxMinPositiveRateChangeFlowConstant(gdm::iBox,gdm::iBoxNodeConnectionType)
						and gdm::pBoxMaxPositiveRateChangeFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) = gdm::pBoxMaxPositiveRateChangeFlowConstant(gdm::iBox,gdm::iBoxNodeConnectionType)
						and gdm::pBoxMinNegativeRateChangeFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) = gdm::pBoxMinNegativeRateChangeFlowConstant(gdm::iBox,gdm::iBoxNodeConnectionType)
						and gdm::pBoxMaxNegativeRateChangeFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) = gdm::pBoxMaxNegativeRateChangeFlowConstant(gdm::iBox,gdm::iBoxNodeConnectionType)
						and gdm::pBoxMinStayTimeSteadyStateFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) = gdm::pBoxMinStayTimeSteadyStateConstant(gdm::iBox,gdm::iBoxNodeConnectionType)
					then
						gdm::pBoxMinFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := 0;
						gdm::pBoxMaxFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := 0;
						gdm::pBoxMinPositiveRateChangeFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := 0;
						gdm::pBoxMaxPositiveRateChangeFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := 0;
						gdm::pBoxMinNegativeRateChangeFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := 0;
						gdm::pBoxMaxNegativeRateChangeFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := 0;
						gdm::pBoxMinStayTimeSteadyStateTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := 0;
						gdm::p01BoxFlowActiveTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := 0;
					else
						gdm::pBoxMinFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := gdm::pBoxMinFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime);
						gdm::pBoxMaxFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := gdm::pBoxMaxFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime);
						gdm::pBoxMinPositiveRateChangeFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := gdm::pBoxMinPositiveRateChangeFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime);
						gdm::pBoxMaxPositiveRateChangeFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := gdm::pBoxMaxPositiveRateChangeFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime);
						gdm::pBoxMinNegativeRateChangeFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := gdm::pBoxMinNegativeRateChangeFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime);
						gdm::pBoxMaxNegativeRateChangeFlowTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := gdm::pBoxMaxNegativeRateChangeFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime);
						gdm::pBoxMinStayTimeSteadyStateTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := gdm::pBoxMinStayTimeSteadyStateFlow(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime);
						gdm::p01BoxFlowActiveTimeDependent(gdm::iBox,gdm::iBoxNodeConnectionType,gdm::iTime) := 1;
					endif;
				endfor;
				
				! Coldbox Flow
				for (gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) do
					if gdm::pColdboxMinInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) = gdm::pColdboxMinInternalFlowConstant(gdm::iColdbox,gdm::iColdboxInternalFlow)
						and gdm::pColdboxMaxInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) = gdm::pColdboxMaxInternalFlowConstant(gdm::iColdbox,gdm::iColdboxInternalFlow)
						and gdm::pColdboxMinPositiveRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) = gdm::pColdboxMinPositiveRateChangeInternalFlowConstant(gdm::iColdbox,gdm::iColdboxInternalFlow)
						and gdm::pColdboxMaxPositiveRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) = gdm::pColdboxMaxPositiveRateChangeInternalFlowConstant(gdm::iColdbox,gdm::iColdboxInternalFlow)
						and gdm::pColdboxMinNegativeRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) = gdm::pColdboxMinNegativeRateChangeInternalFlowConstant(gdm::iColdbox,gdm::iColdboxInternalFlow)
						and gdm::pColdboxMaxNegativeRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) = gdm::pColdboxMaxNegativeRateChangeInternalFlowConstant(gdm::iColdbox,gdm::iColdboxInternalFlow)
						and gdm::pColdboxMinStayTimeSteadyStateInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) = gdm::pColdboxMinStayTimeSteadyStateConstant(gdm::iColdbox,gdm::iColdboxInternalFlow)
					then
						gdm::pColdboxMinInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 0;
						gdm::pColdboxMaxInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 0;
						gdm::pColdboxMinPositiveRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 0;
						gdm::pColdboxMaxPositiveRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 0;
						gdm::pColdboxMinNegativeRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 0;
						gdm::pColdboxMaxNegativeRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 0;
						gdm::pColdboxMinStayTimeSteadyStateTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 0;
						gdm::p01ColdboxFlowActiveTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 0;
					else
						gdm::pColdboxMinInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMinInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
						gdm::pColdboxMaxInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMaxInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
						gdm::pColdboxMinPositiveRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMinPositiveRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
						gdm::pColdboxMaxPositiveRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMaxPositiveRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
						gdm::pColdboxMinNegativeRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMinNegativeRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
						gdm::pColdboxMaxNegativeRateChangeInternalFlowTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMaxNegativeRateChangeInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
						gdm::pColdboxMinStayTimeSteadyStateTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := gdm::pColdboxMinStayTimeSteadyStateInternalFlow(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime);
						gdm::p01ColdboxFlowActiveTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 1;
					endif;
				endfor;
				
				
				! Compressor
				for (gdm::iCompressorArc,gdm::iTime) do
					if gdm::pCompressorMinFlow(gdm::iCompressorArc,gdm::iTime) = gdm::pCompressorMinFlowConstant(gdm::iCompressorArc)
						and gdm::pCompressorMaxFlow(gdm::iCompressorArc,gdm::iTime) = gdm::pCompressorMaxFlowConstant(gdm::iCompressorArc)
						and gdm::pCompressorMinPositiveRateChangeFlow(gdm::iCompressorArc,gdm::iTime) = gdm::pCompressorMinPositiveRateChangeFlowConstant(gdm::iCompressorArc)
						and gdm::pCompressorMaxPositiveRateChangeFlow(gdm::iCompressorArc,gdm::iTime) = gdm::pCompressorMaxPositiveRateChangeFlowConstant(gdm::iCompressorArc)
						and gdm::pCompressorMinNegativeRateChangeFlow(gdm::iCompressorArc,gdm::iTime) = gdm::pCompressorMinNegativeRateChangeFlowConstant(gdm::iCompressorArc)
						and gdm::pCompressorMaxNegativeRateChangeFlow(gdm::iCompressorArc,gdm::iTime) = gdm::pCompressorMaxNegativeRateChangeFlowConstant(gdm::iCompressorArc)
						and gdm::pCompressorMinStayTimeSteadyState(gdm::iCompressorArc,gdm::iTime) = gdm::pCompressorMinStayTimeSteadyStateConstant(gdm::iCompressorArc)
						and gdm::pCompressorMaxPower(gdm::iCompressorArc,gdm::iTime) = gdm::pCompressorMaxPowerConstant(gdm::iCompressorArc)
					then
						gdm::pCompressorMinFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := 0;
						gdm::pCompressorMaxFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := 0;
						gdm::pCompressorMinPositiveRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := 0;
						gdm::pCompressorMaxPositiveRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := 0;					      
						gdm::pCompressorMinNegativeRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := 0;
						gdm::pCompressorMaxNegativeRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := 0;
						gdm::pCompressorMinStayTimeSteadyStateTimeDependent(gdm::iCompressorArc,gdm::iTime) := 0;
						gdm::pCompressorMaxPowerTimeDependent(gdm::iCompressorArc,gdm::iTime) := 0;
						gdm::p01CompressorActiveTimeDependent(gdm::iCompressorArc,gdm::iTime) := 0;
					else
						gdm::pCompressorMinFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMinFlow(gdm::iCompressorArc,gdm::iTime);
						gdm::pCompressorMaxFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMaxFlow(gdm::iCompressorArc,gdm::iTime);
						gdm::pCompressorMinPositiveRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMinPositiveRateChangeFlow(gdm::iCompressorArc,gdm::iTime);
						gdm::pCompressorMaxPositiveRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMaxPositiveRateChangeFlow(gdm::iCompressorArc,gdm::iTime);					      
						gdm::pCompressorMinNegativeRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMinNegativeRateChangeFlow(gdm::iCompressorArc,gdm::iTime);
						gdm::pCompressorMaxNegativeRateChangeFlowTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMaxNegativeRateChangeFlow(gdm::iCompressorArc,gdm::iTime);
						gdm::pCompressorMinStayTimeSteadyStateTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMinStayTimeSteadyState(gdm::iCompressorArc,gdm::iTime);
						gdm::pCompressorMaxPowerTimeDependent(gdm::iCompressorArc,gdm::iTime) := gdm::pCompressorMaxPower(gdm::iCompressorArc,gdm::iTime);
						gdm::p01CompressorActiveTimeDependent(gdm::iCompressorArc,gdm::iTime) := 1;
					endif;
				endfor;
				
				
				! Cooling Tower
				for (gdm::iCoolingTower,gdm::iTime) do
					if gdm::pCoolingTowerTemperature(gdm::iCoolingTower,gdm::iTime) = gdm::pCoolingTowerTemperatureConstant(gdm::iCoolingTower)
					then
						gdm::pCoolingTowerTemperatureTimeDependent(gdm::iCoolingTower,gdm::iTime) := 0; 
						gdm::p01CoolingTowerTemperatureActiveTimeDependent(gdm::iCoolingTower,gdm::iTime) := 0;
					else
						gdm::pCoolingTowerTemperatureTimeDependent(gdm::iCoolingTower,gdm::iTime) := gdm::pCoolingTowerTemperature(gdm::iCoolingTower,gdm::iTime); 
						gdm::p01CoolingTowerTemperatureActiveTimeDependent(gdm::iCoolingTower,gdm::iTime) := 1;
					endif;
				endfor;
				
				
				! Output Flow
				for (gdm::iOutputFlowNode,gdm::iTime) do
					if gdm::pOutputFlowFixed(gdm::iOutputFlowNode,gdm::iTime) = gdm::pOutputFlowNodeFixedConstant(gdm::iOutputFlowNode)
						and gdm::pOutputFlowNodeMinFlow(gdm::iOutputFlowNode,gdm::iTime) = gdm::pOutputFlowNodeMinFlowConstant(gdm::iOutputFlowNode)
						and gdm::pOutputFlowNodeMaxFlow(gdm::iOutputFlowNode,gdm::iTime) = gdm::pOutputFlowNodeMaxFlowConstant(gdm::iOutputFlowNode)
						and gdm::pOutputFlowNodeMinPositiveRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime) = gdm::pOutputFlowNodeMinPositiveRateChangeFlowConstant(gdm::iOutputFlowNode)
						and gdm::pOutputFlowNodeMaxPositiveRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime) = gdm::pOutputFlowNodeMaxPositiveRateChangeFlowConstant(gdm::iOutputFlowNode)
						and gdm::pOutputFlowNodeMinNegativeRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime) = gdm::pOutputFlowNodeMinNegativeRateChangeFlowConstant(gdm::iOutputFlowNode)
						and gdm::pOutputFlowNodeMaxNegativeRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime) = gdm::pOutputFlowNodeMaxNegativeRateChangeFlowConstant(gdm::iOutputFlowNode)
						and gdm::pOutputFlowNodeMinStayTimeSteadyState(gdm::iOutputFlowNode,gdm::iTime) = gdm::pOutputFlowNodeMinStayTimeSteadyStateConstant(gdm::iOutputFlowNode)
						and gdm::pOutputFlowNodeValuePerUnit(gdm::iOutputFlowNode, gdm::iTime) = gdm::pOutputFlowNodeValuePerUnitConstant(gdm::iOutputFlowNode)
					then
						gdm::pOutputFlowNodeFixedTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 0;
						gdm::pOutputFlowNodeMinFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 0;
						gdm::pOutputFlowNodeMaxFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 0;
						gdm::pOutputFlowNodeMinPositiveRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 0;
						gdm::pOutputFlowNodeMaxPositiveRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 0; 
						gdm::pOutputFlowNodeMinNegativeRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 0;
						gdm::pOutputFlowNodeMaxNegativeRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 0;
						gdm::pOutputFlowNodeMinStayTimeSteadyStateTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 0;
						gdm::pOutputFlowNodeValuePerUnitTimeDependent(gdm::iOutputFlowNode, gdm::iTime) :=0;
						gdm::p01OutputFlowNodeActiveTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 0;
					else
						gdm::pOutputFlowNodeFixedTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowFixed(gdm::iOutputFlowNode,gdm::iTime);
						gdm::pOutputFlowNodeMinFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMinFlow(gdm::iOutputFlowNode,gdm::iTime);
						gdm::pOutputFlowNodeMaxFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMaxFlow(gdm::iOutputFlowNode,gdm::iTime);
						gdm::pOutputFlowNodeMinPositiveRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMinPositiveRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime);
						gdm::pOutputFlowNodeMaxPositiveRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMaxPositiveRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime); 
						gdm::pOutputFlowNodeMinNegativeRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMinNegativeRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime);
						gdm::pOutputFlowNodeMaxNegativeRateChangeFlowTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMaxNegativeRateChangeFlow(gdm::iOutputFlowNode,gdm::iTime);
						gdm::pOutputFlowNodeMinStayTimeSteadyStateTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := gdm::pOutputFlowNodeMinStayTimeSteadyState(gdm::iOutputFlowNode,gdm::iTime);
						gdm::pOutputFlowNodeValuePerUnitTimeDependent(gdm::iOutputFlowNode, gdm::iTime) := gdm::pOutputFlowNodeValuePerUnit(gdm::iOutputFlowNode, gdm::iTime);
						gdm::p01OutputFlowNodeActiveTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 1;
					endif;
				endfor;
				
				! Input Flow
				for (gdm::iInputFlowNode,gdm::iTime) do
					if gdm::pInputFlowNodeFixed(gdm::iInputFlowNode, gdm::iTime) = gdm::pInputFlowNodeFixedConstant(gdm::iInputFlowNode)
						and gdm::pInputFlowNodeMinFlow(gdm::iInputFlowNode,gdm::iTime) = gdm::pInputFlowNodeMinFlowConstant(gdm::iInputFlowNode)
						and gdm::pInputFlowNodeMaxFlow(gdm::iInputFlowNode,gdm::iTime) = gdm::pInputFlowNodeMaxFlowConstant(gdm::iInputFlowNode)
						and gdm::pInputFlowNodeCostPerUnit(gdm::iInputFlowNode,gdm::iTime) = gdm::pInputFlowNodeCostPerUnitConstant(gdm::iInputFlowNode)
						and gdm::pInputFlowNodeMinPositiveRateChangeFlow(gdm::iInputFlowNode,gdm::iTime) = gdm::pInputFlowNodeMinPositiveRateChangeFlowConstant(gdm::iInputFlowNode)
						and gdm::pInputFlowNodeMaxPositiveRateChangeFlow(gdm::iInputFlowNode,gdm::iTime) = gdm::pInputFlowNodeMaxPositiveRateChangeFlowConstant(gdm::iInputFlowNode)
						and gdm::pInputFlowNodeMinNegativeRateChangeFlow(gdm::iInputFlowNode,gdm::iTime) = gdm::pInputFlowNodeMinNegativeRateChangeFlowConstant(gdm::iInputFlowNode)
						and gdm::pInputFlowNodeMaxNegativeRateChangeFlow(gdm::iInputFlowNode,gdm::iTime) = gdm::pInputFlowNodeMaxNegativeRateChangeFlowConstant(gdm::iInputFlowNode)
						and gdm::pInputFlowNodeMinStayTimeSteadyState(gdm::iInputFlowNode,gdm::iTime) = gdm::pInputFlowNodeMinStayTimeSteadyStateConstant(gdm::iInputFlowNode)
					then
						gdm::pInputFlowNodeFixedTimeDependent(gdm::iInputFlowNode, gdm::iTime) := 0;
						gdm::pInputFlowNodeMinFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 0;
						gdm::pInputFlowNodeMaxFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 0;
						gdm::pInputFlowNodeCostPerUnitTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 0;
						gdm::pInputFlowNodeMinPositiveRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 0;
						gdm::pInputFlowNodeMaxPositiveRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 0;
						gdm::pInputFlowNodeMinNegativeRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 0;
						gdm::pInputFlowNodeMaxNegativeRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 0;
						gdm::pInputFlowNodeMinStayTimeSteadyStateTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 0;
						gdm::p01InputFlowNodeActiveTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 0;
					else
						gdm::pInputFlowNodeFixedTimeDependent(gdm::iInputFlowNode, gdm::iTime) := gdm::pInputFlowNodeFixed(gdm::iInputFlowNode,gdm::iTime);
						gdm::pInputFlowNodeMinFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMinFlow(gdm::iInputFlowNode,gdm::iTime);
						gdm::pInputFlowNodeMaxFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMaxFlow(gdm::iInputFlowNode,gdm::iTime);
						gdm::pInputFlowNodeCostPerUnitTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeCostPerUnit(gdm::iInputFlowNode,gdm::iTime);
						gdm::pInputFlowNodeMinPositiveRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMinPositiveRateChangeFlow(gdm::iInputFlowNode,gdm::iTime);
						gdm::pInputFlowNodeMaxPositiveRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMaxPositiveRateChangeFlow(gdm::iInputFlowNode,gdm::iTime);
						gdm::pInputFlowNodeMinNegativeRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMinNegativeRateChangeFlow(gdm::iInputFlowNode,gdm::iTime);
						gdm::pInputFlowNodeMaxNegativeRateChangeFlowTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMaxNegativeRateChangeFlow(gdm::iInputFlowNode,gdm::iTime);
						gdm::pInputFlowNodeMinStayTimeSteadyStateTimeDependent(gdm::iInputFlowNode,gdm::iTime) := gdm::pInputFlowNodeMinStayTimeSteadyState(gdm::iInputFlowNode,gdm::iTime);
						gdm::p01InputFlowNodeActiveTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 1;
					endif;
				endfor;
				
				! Liquefiers
				for (gdm::iLiquefierArc,gdm::iTime) do
					if gdm::pLiquefierMinFlow(gdm::iLiquefierArc,gdm::iTime) = gdm::pLiquefierMinFlowConstant(gdm::iLiquefierArc)
						and gdm::pLiquefierMaxFlow(gdm::iLiquefierArc,gdm::iTime) = gdm::pLiquefierMaxFlowConstant(gdm::iLiquefierArc)
						and gdm::pLiquefierMinPositiveRateChangeFlow(gdm::iLiquefierArc,gdm::iTime) = gdm::pLiquefierMinPositiveRateChangeFlowConstant(gdm::iLiquefierArc)
						and gdm::pLiquefierMaxPositiveRateChangeFlow(gdm::iLiquefierArc,gdm::iTime) = gdm::pLiquefierMaxPositiveRateChangeFlowConstant(gdm::iLiquefierArc)
						and gdm::pLiquefierMinNegativeRateChangeFlow(gdm::iLiquefierArc,gdm::iTime) = gdm::pLiquefierMinNegativeRateChangeFlowConstant(gdm::iLiquefierArc)
						and gdm::pLiquefierMaxNegativeRateChangeFlow(gdm::iLiquefierArc,gdm::iTime) = gdm::pLiquefierMaxNegativeRateChangeFlowConstant(gdm::iLiquefierArc)
						and gdm::pLiquefierMinStayTimeSteadyState(gdm::iLiquefierArc,gdm::iTime) = gdm::pLiquefierMinStayTimeSteadyStateConstant(gdm::iLiquefierArc)
						and gdm::pLiquefierMaxPower(gdm::iLiquefierArc,gdm::iTime) = gdm::pLiquefierMaxPowerConstant(gdm::iLiquefierArc)
					then
						gdm::pLiquefierMinFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 0;
						gdm::pLiquefierMaxFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 0;
						gdm::pLiquefierMinPositiveRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 0;
						gdm::pLiquefierMaxPositiveRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 0;
						gdm::pLiquefierMinNegativeRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 0;
						gdm::pLiquefierMaxNegativeRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 0;
						gdm::pLiquefierMinStayTimeSteadyStateTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 0;
						gdm::pLiquefierMaxPowerTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 0;
						gdm::p01LiquifierActiveTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 0;
					else
						gdm::pLiquefierMinFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMinFlow(gdm::iLiquefierArc,gdm::iTime);
						gdm::pLiquefierMaxFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMaxFlow(gdm::iLiquefierArc,gdm::iTime);
						gdm::pLiquefierMinPositiveRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMinPositiveRateChangeFlow(gdm::iLiquefierArc,gdm::iTime);
						gdm::pLiquefierMaxPositiveRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMaxPositiveRateChangeFlow(gdm::iLiquefierArc,gdm::iTime);
						gdm::pLiquefierMinNegativeRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMinNegativeRateChangeFlow(gdm::iLiquefierArc,gdm::iTime);
						gdm::pLiquefierMaxNegativeRateChangeFlowTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMaxNegativeRateChangeFlow(gdm::iLiquefierArc,gdm::iTime);
						gdm::pLiquefierMinStayTimeSteadyStateTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMinStayTimeSteadyState(gdm::iLiquefierArc,gdm::iTime);
						gdm::pLiquefierMaxPowerTimeDependent(gdm::iLiquefierArc,gdm::iTime) := gdm::pLiquefierMaxPower(gdm::iLiquefierArc,gdm::iTime);
						gdm::p01LiquifierActiveTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 1;
					endif;
				endfor;
				
				! Energy Contract
				for (gdm::iEnergyContract,gdm::iTime) do
					if gdm::pEnergyContractCost(gdm::iEnergyContract,gdm::iTime) = gdm::pEnergyContractCostConstant(gdm::iEnergyContract)
					then
						gdm::pEnergyContractCostTimeDependent(gdm::iEnergyContract,gdm::iTime) := 0;
						gdm::p01EnergyContractActiveTimeDependent(gdm::iEnergyContract,gdm::iTime) := 0;
					else
						gdm::pEnergyContractCostTimeDependent(gdm::iEnergyContract,gdm::iTime) := gdm::pEnergyContractCost(gdm::iEnergyContract,gdm::iTime);
						gdm::p01EnergyContractActiveTimeDependent(gdm::iEnergyContract,gdm::iTime) := 1;
					endif;
				endfor;
				
				! Tanks
				for (gdm::iTankNode,gdm::iTime) do
					if gdm::pTankMinLevel(gdm::iTankNode,gdm::iTime) = gdm::pTankMinLevelConstant(gdm::iTankNode)
						and gdm::pTankMaxLevel(gdm::iTankNode,gdm::iTime) = gdm::pTankMaxLevelConstant(gdm::iTankNode)
					then
						gdm::pTankMinLevelTimeDependent(gdm::iTankNode,gdm::iTime) := 0;
						gdm::pTankMaxLevelTimeDependent(gdm::iTankNode,gdm::iTime) := 0;
						gdm::p01TankEnableLevelConstraintsTimeDependent(gdm::iTankNode,gdm::iTime) := 0;
						gdm::p01TankLevelActiveTimeDependent(gdm::iTankNode,gdm::iTime) := 0;
					else
						gdm::pTankMinLevelTimeDependent(gdm::iTankNode,gdm::iTime) := gdm::pTankMinLevel(gdm::iTankNode,gdm::iTime);
						gdm::pTankMaxLevelTimeDependent(gdm::iTankNode,gdm::iTime) := gdm::pTankMaxLevel(gdm::iTankNode,gdm::iTime);
						gdm::p01TankEnableLevelConstraintsTimeDependent(gdm::iTankNode,gdm::iTime) := gdm::p01TankEnableLevelConstraints(gdm::iTankNode,gdm::iTime);
						gdm::p01TankLevelActiveTimeDependent(gdm::iTankNode,gdm::iTime) := 1;
					endif;
				endfor;
				
				! Buffers
				for (gdm::iBufferNode,gdm::iTime) do
					if gdm::pBufferMinPressure(gdm::iBufferNode, gdm::iTime) = gdm::pBufferMinPressureConstant(gdm::iBufferNode)
						and gdm::pBufferMaxPressure(gdm::iBufferNode, gdm::iTime) = gdm::pBufferMaxPressureConstant(gdm::iBufferNode)
					then
						gdm::pBufferMinPressureTimeDependent(gdm::iBufferNode, gdm::iTime) := 0;
						gdm::pBufferMaxPressureTimeDependent(gdm::iBufferNode, gdm::iTime) := 0;
						gdm::p01BufferActiveTimeDependent(gdm::iBufferNode, gdm::iTime) := 0;
					else
						gdm::pBufferMinPressureTimeDependent(gdm::iBufferNode, gdm::iTime) := gdm::pBufferMinPressure(gdm::iBufferNode, gdm::iTime);
						gdm::pBufferMaxPressureTimeDependent(gdm::iBufferNode, gdm::iTime) := gdm::pBufferMaxPressure(gdm::iBufferNode, gdm::iTime);
						gdm::p01BufferActiveTimeDependent(gdm::iBufferNode, gdm::iTime) := 1;
					endif;
				endfor;
				
				! Valves
				for (gdm::iValveArc,gdm::iTime) do
					if gdm::pValveSetPoint(gdm::iValveArc,gdm::iTime) = gdm::pValveSetPointConstant(gdm::iValveArc)
						and gdm::epValveControlMode(gdm::iValveArc,gdm::iTime) = gdm::epValveControlModeConstant(gdm::iValveArc)
					then
						gdm::pValveSetpointTimeDependent(gdm::iValveArc,gdm::iTime) := 0;
						gdm::epValveControlModeTimeDependent(gdm::iValveArc,gdm::iTime) := '';
						gdm::p01ValveActiveTimeDependent(gdm::iValveArc,gdm::iTime) := 0;
					else
						gdm::pValveSetpointTimeDependent(gdm::iValveArc,gdm::iTime) := gdm::pValveSetPoint(gdm::iValveArc,gdm::iTime);
						gdm::epValveControlModeTimeDependent(gdm::iValveArc,gdm::iTime) := gdm::epValveControlMode(gdm::iValveArc,gdm::iTime);
						gdm::p01ValveActiveTimeDependent(gdm::iValveArc,gdm::iTime) := 1;
					endif;
				endfor;
				
				! Status Element
				for (gdm::iStatusModeElement, gdm::iTime) do
					if gdm::epStatusElement(gdm::iStatusModeElement, gdm::iTime) = gdm::epStatusElementConstant(gdm::iStatusModeElement)
					then
						gdm::epStatusElementTimeDependent(gdm::iStatusModeElement, gdm::iTime) := '';
						gdm::p01StatusElementActiveTimeDependent(gdm::iStatusModeElement, gdm::iTime) := 0;
					else
						gdm::epStatusElementTimeDependent(gdm::iStatusModeElement, gdm::iTime) := gdm::epStatusElement(gdm::iStatusModeElement, gdm::iTime);
						gdm::p01StatusElementActiveTimeDependent(gdm::iStatusModeElement, gdm::iTime) := 1;
					endif;
				endfor;
				
				! Operating Modes
				for (gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime) do
					if gdm::p01OperatingModeAllowed(gdm::iOperatingModeElement,gdm::iOperatingMode, gdm::iTime) = gdm::p01OperatingModeAllowedConstant(gdm::iOperatingModeElement,gdm::iOperatingMode)
					then
						gdm::p01OperatingModeAllowedTimeDependent(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime) := 0;
						gdm::p01OperatingModeActiveTimeDependent(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime) := 0;
					else
						gdm::p01OperatingModeAllowedTimeDependent(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime) := gdm::p01OperatingModeAllowed(gdm::iOperatingModeElement,gdm::iOperatingMode, gdm::iTime);
						gdm::p01OperatingModeActiveTimeDependent(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime) := 1;
					endif;
				endfor;
				
				! Switchable elements
				for (gdm::iOperatingModeElement,gdm::iTime) do
					if gdm::epOperatingModeForced(gdm::iOperatingModeElement, gdm::iTime) = gdm::epOperatingModeForcedConstant(gdm::iOperatingModeElement)
					then
						gdm::epOperatingModeForcedTimeDependent(gdm::iOperatingModeElement, gdm::iTime) := '';
						gdm::p01OperatingModeElementActiveTimeDependent(gdm::iOperatingModeElement, gdm::iTime) := 0;
					else
						gdm::epOperatingModeForcedTimeDependent(gdm::iOperatingModeElement, gdm::iTime) := gdm::epOperatingModeForced(gdm::iOperatingModeElement, gdm::iTime);
						gdm::p01OperatingModeElementActiveTimeDependent(gdm::iOperatingModeElement, gdm::iTime) := 1;
					endif;
				endfor;
			}
		}
		Procedure procCopyFilterGeneralDataInTimeDependentData_udm {
			Body: {
				!!!! This procedure copy the data from the general parameter to the parameter Time Dependente in order to write them in the data base (or Excel) !!!!!
				
				! User Parameter
				!for (gdm::iColdbox,gdm::iTime) do
				!	if udm::pUserParameter(gdm::iColdbox,gdm::iTime) = udm::pUserParameterConstant(gdm::iColdbox)
				!	then
				!		udm::pUserParameterTimeDependent(gdm::iColdbox,gdm::iTime) := 0;
				!		udm::p01TimeDependentUserParameter(gdm::iTime) := 0;
				!	else
				!		udm::pUserParameterTimeDependent(gdm::iColdbox,gdm::iTime) := udm::pUserParameter(gdm::iColdbox,gdm::iTime);
				!		udm::p01TimeDependentUserParameter(gdm::iTime) := 1;
				!	endif;
				!endfor;
				!
			}
		}
		Procedure procForceActiveTimeDependentTo_1 {
			Body: {
				gdm::p01PressureControlNodeSetPointActiveTimeDependent(gdm::iPressureControlNode,gdm::iTime) := 1;
				gdm::p01BackupActiveTimeDependent(gdm::iBackupArc,gdm::iTime) := 1;
				gdm::p01BoxFlowActiveTimeDependent(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) := 1;
				gdm::p01ColdboxFlowActiveTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 1;
				gdm::p01CompressorActiveTimeDependent(gdm::iCompressorArc,gdm::iTime) := 1;
				gdm::p01CoolingTowerTemperatureActiveTimeDependent(gdm::iCoolingTower,gdm::iTime) := 1;
				gdm::p01OutputFlowNodeActiveTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 1;
				gdm::p01InputFlowNodeActiveTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 1;
				gdm::p01LiquifierActiveTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 1;
				gdm::p01EnergyContractActiveTimeDependent(gdm::iEnergyContract,gdm::iTime) := 1;
				gdm::p01TankLevelActiveTimeDependent(gdm::iTankNode,gdm::iTime) := 1;
				gdm::p01BufferActiveTimeDependent(gdm::iBufferNode, gdm::iTime) :=1;
				gdm::p01ValveActiveTimeDependent(gdm::iValveArc,gdm::iTime) := 1;
				gdm::p01OperatingModeActiveTimeDependent(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime) := 1;
				gdm::p01StatusElementActiveTimeDependent(gdm::iStatusModeElement, gdm::iTime) := 1;
				gdm::p01OperatingModeElementActiveTimeDependent(gdm::iOperatingModeElement, gdm::iTime) := 1;
				
				! add the udm parameter "P01TimeDependentUserActive" of your udm library
				! udm::p01TimeDependentColdboxUserActive(gdm::iColdbox,gdm::iTime) := 1;
			}
		}
		Procedure procForceActiveTimeDependentTo_0 {
			Body: {
				if p01AlertMessageBeforeInitDisable = 1 then
					pValidationValue := 1;
				else
					pValidationValue := DialogAsk("Warning : if you do that, all the time dependent data will be replaced by the constant data at the futur modification of one constant data", "Ok", "Cancel",,"WARNING");
				endif;
				
				if pValidationValue = 1 then
					gdm::p01PressureControlNodeSetPointActiveTimeDependent(gdm::iPressureControlNode,gdm::iTime) := 0;
					gdm::p01BackupActiveTimeDependent(gdm::iBackupArc,gdm::iTime) := 0;
					gdm::p01BoxFlowActiveTimeDependent(gdm::iBox, gdm::iBoxNodeConnectionType, gdm::iTime) := 0;
					gdm::p01ColdboxFlowActiveTimeDependent(gdm::iColdbox,gdm::iColdboxInternalFlow,gdm::iTime) := 0;
					gdm::p01CompressorActiveTimeDependent(gdm::iCompressorArc,gdm::iTime) := 0;
					gdm::p01CoolingTowerTemperatureActiveTimeDependent(gdm::iCoolingTower,gdm::iTime) := 0;
					gdm::p01OutputFlowNodeActiveTimeDependent(gdm::iOutputFlowNode,gdm::iTime) := 0;
					gdm::p01InputFlowNodeActiveTimeDependent(gdm::iInputFlowNode,gdm::iTime) := 0;
					gdm::p01LiquifierActiveTimeDependent(gdm::iLiquefierArc,gdm::iTime) := 0;
					gdm::p01EnergyContractActiveTimeDependent(gdm::iEnergyContract,gdm::iTime) := 0;
					gdm::p01TankLevelActiveTimeDependent(gdm::iTankNode,gdm::iTime) := 0;
					gdm::p01ValveActiveTimeDependent(gdm::iValveArc,gdm::iTime) := 0;
					gdm::p01BufferActiveTimeDependent(gdm::iBufferNode, gdm::iTime) := 0;
					gdm::p01OperatingModeActiveTimeDependent(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime) := 0;
					gdm::p01StatusElementActiveTimeDependent(gdm::iStatusModeElement, gdm::iTime) := 0;
					gdm::p01OperatingModeElementActiveTimeDependent(gdm::iOperatingModeElement, gdm::iTime) := 0;
				
				
					! add the udm parameter "P01TimeDependentUserActive" of your udm library
					! udm::p01TimeDependentColdboxUserActive(gdm::iColdbox,gdm::iTime) := 0;
				endif;
				
				p01AlertMessageBeforeInitDisable:=0;
			}
			Parameter pValidationValue;
		}
	}
	Section RightManagement {
		Parameter p01ReadOnlyInputFile {
			Range: binary;
		}
		Parameter p01ReadOnlyCreateNewItem {
			Range: binary;
		}
		Parameter p01ReadOnlyModifyTimeDependentPage {
			Range: binary;
		}
		Parameter p01ReadOnlyModifyTimePage {
			Range: binary;
		}
		Parameter p01UnlockRightModifyAdministratorData {
			InitialData: 1;
		}
		Procedure procRightUserForDataManager {
			Body: {
				p01ReadOnlyInputFile :=0;
				p01ReadOnlyCreateNewItem := 1;
				p01ReadOnlyModifyTimePage := 0;
				p01ReadOnlyModifyTimeDependentPage := 1;
			}
		}
	}
	Section Result_Manager {
		DeclarationSection Calculated_Parameter {
			Parameter pTotalExtraPower {
				IndexDomain: (gdm::iOperatingModeElement, gdm::iTime);
				Definition: {
					sum(gdm::iOperatingMode, gom::vCompressorExtraPower(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime))
					+ sum(gdm::iOperatingMode, gom::vLiquefierExtraPower(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime))
					+ sum( gdm::iOperatingMode, gom::vboxExtraPower(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime))
					+ sum( gdm::iOperatingMode, gom::vBackupExtraPower(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime))
				}
			}
			Parameter pBackupPowerPump {
				IndexDomain: (gdm::iBackupArc, gdm::iTime);
				Definition: gdm::pBackupPowerPump( gdm::iBackupArc ) * gom::v01Backup(gdm::iBackupArc, gdm::iTime );
			}
			Parameter pTotalGeneralPower {
				IndexDomain: (gdm::iTime);
				Definition: {
					! total power
					sum (gdm::iEnergyContract,
						pTotalGeneralPowerPerEnerCont(gdm::iEnergyContract, gdm::iTime)
					)
				}
			}
			Parameter pTotalGeneralPowerPerEnerCont {
				IndexDomain: (gdm::iEnergyContract, gdm::iTime);
				Definition: {
					! total power
					( sum( ( gdm::iCompressorArc ) | gdm::epCompressorEnergyContract( gdm::iCompressorArc ) = gdm::iEnergyContract, gom::vCompressorPower( gdm::iCompressorArc, gdm::iTime ) + sum(gdm::iOperatingMode, gom::vCompressorExtraPower(gdm::iCompressorArc,gdm::iOperatingMode,gdm::iTime)) )+
					  sum( ( gdm::iLiquefierArc )  | gdm::epLiquefierEnergyContract( gdm::iLiquefierArc ) = gdm::iEnergyContract,   gom::vLiquefierPower( gdm::iLiquefierArc, gdm::iTime )   +  sum(gdm::iOperatingMode, gom::vLiquefierExtraPower(gdm::iLiquefierArc,gdm::iOperatingMode,gdm::iTime)) )+
					  sum( ( gdm::iBox )       | gdm::epBoxEnergyContract( gdm::iBox ) = gdm::iEnergyContract, gom::vboxPower(gdm::iBox, gdm::iTime)+ sum( gdm::iOperatingMode, gom::vBoxExtraPower(gdm::iBox,gdm::iOperatingMode,gdm::iTime) )) +
					  sum( ( gdm::iBackupArc )     | gdm::epBackupEnergyContract( gdm::iBackupArc ) = gdm::iEnergyContract,   sum( gdm::iOperatingMode, gom::vBackupExtraPower(gdm::iBackupArc,gdm::iOperatingMode,gdm::iTime) )) +
					  sum( ( gdm::iAuxPowerGroup ) | gdm::epAuxPowerGroupEnergyContract( gdm::iAuxPowerGroup ) = gdm::iEnergyContract, gom::vAuxPower( gdm::iAuxPowerGroup, gdm::iTime ) )	+
					  sum( ( gdm::iBackupArc )     | gdm::epBackupEnergyContract( gdm::iBackupArc ) = gdm::iEnergyContract,  gdm::pBackupPowerPump( gdm::iBackupArc ) * gom::v01Backup(gdm::iBackupArc, gdm::iTime ) )
					)
				}
			}
			Parameter pColdboxAirTotal {
				IndexDomain: (gdm::icoldbox, gdm::itime);
				Definition: gom::vAirHp(gdm::iColdbox, gdm::iTime) + gom::vAirMp(gdm::iColdbox, gdm::iTime);
			}
		}
		DeclarationSection Selection_Element {
			Set sInputFlowNotZero {
				SubsetOf: gdm::sNodes;
				Index: iInputFlowNodeNotZero;
				Definition: {
					
					gdm::sNodes - gom::sInputZeroNodes
				}
			}
			Set sOutputFlowNotZero {
				SubsetOf: gdm::sNodes;
				Index: iOutputFlowNotZero;
				Definition: {
					
					gdm::sNodes - gom::sOutputZeroNodes
				}
			}
			Set sColdboxGraphInputOutputNodeSelect {
				Index: iColdboxGraphInputOutputSelect;
				Definition: {
					{ 'Input Node', 'Output Node' }
				}
			}
			ElementParameter epColdboxGraphInputOutputNodeSelect {
				Range: sColdboxGraphInputOutputNodeSelect;
			}
			Parameter p01ColdboxGraphInputNodeSelect {
				Range: binary;
				Definition: {
					if epColdboxGraphInputOutputNodeSelect = 'Input Node' then
						0
					else
						1
					endif
				}
			}
			Parameter p01ColdboxGraphOutputNodeSelect {
				Range: binary;
				Definition: {
					if epColdboxGraphInputOutputNodeSelect = 'Output Node' then
						0
					else
						1
					endif
				}
			}
			ElementParameter epRM_TimeSelect1 {
				Range: gdm::calHorizon;
			}
			ElementParameter epRM_TankNodeSelected1 {
				Range: gdm::sTankNodes;
				Default: '';
				Comment: "gdm::iTankNode | gdm::epTankLiquidProduct(gdm::iTankNode)=\'n2\'";
			}
			ElementParameter epRM_TankNodeSelected2 {
				Range: gdm::sTankNodes;
			}
			ElementParameter epRM_TankNodeSelected3 {
				Range: gdm::sTankNodes;
			}
			ElementParameter epColorGraphProduct1 {
				Range: AllColors;
				Definition: {
					if gdm::epTankLiquidProduct(epRM_TankNodeSelected1) = gdm::epProductN2 then
						'COOD_LIN'
					elseif gdm::epTankLiquidProduct(epRM_TankNodeSelected1) = gdm::epProductO2 then
						'COOD_LOX'
					elseif gdm::epTankLiquidProduct(epRM_TankNodeSelected1) = gdm::epProductar then
						'COOD_LAR'
					else
						'White'
					endif
				}
			}
			ElementParameter epColorGraphProduct2 {
				Range: AllColors;
				Definition: {
					if gdm::epTankLiquidProduct(epRM_TankNodeSelected2) = gdm::epProductN2 then
						'COOD_LIN'
					elseif gdm::epTankLiquidProduct(epRM_TankNodeSelected2) = gdm::epProductO2 then
						'COOD_LOX'
					elseif gdm::epTankLiquidProduct(epRM_TankNodeSelected2) = gdm::epProductar then
						'COOD_LAR'
					else
						'White'
					endif
				}
			}
			ElementParameter epColorGraphProduct3 {
				Range: AllColors;
				Definition: {
					if gdm::epTankLiquidProduct(epRM_TankNodeSelected3) = gdm::epProductN2 then
						'COOD_LIN'
					elseif gdm::epTankLiquidProduct(epRM_TankNodeSelected3) = gdm::epProductO2 then
						'COOD_LOX'
					elseif gdm::epTankLiquidProduct(epRM_TankNodeSelected3) = gdm::epProductar then
						'COOD_LAR'
					else
						'White'
					endif
				}
			}
			ElementParameter epRM_EnergyContractSelected3 {
				Range: gdm::sEnergyContract;
			}
			ElementParameter epBoxSelect1 {
				Range: gdm::sBoxes;
			}
			ElementParameter epArcSelect1 {
				Range: gdm::sArcs;
			}
			ElementParameter epArcSelect2 {
				Range: gdm::sArcs;
			}
			ElementParameter epArcSelect3 {
				Range: gdm::sArcs;
			}
			ElementParameter epArcSelect4 {
				Range: gdm::sArcs;
			}
			ElementParameter epNodeSelect1 {
				Range: gdm::sNodes;
			}
			ElementParameter epNodeSelect2 {
				Range: gdm::sNodes;
			}
			ElementParameter epNodeSelect3 {
				Range: gdm::sNodes;
			}
			ElementParameter epNodeSelect4 {
				Range: gdm::sNodes;
			}
			ElementParameter epInputFlowSelect1 {
				Range: gdm::sInputFlowNodes;
			}
			ElementParameter epInputFlowSelect2 {
				Range: gdm::sInputFlowNodes;
			}
			ElementParameter epInputFlowSelect3 {
				Range: gdm::sInputFlowNodes;
			}
			ElementParameter epInputFlowSelect4 {
				Range: gdm::sInputFlowNodes;
			}
			ElementParameter epOutputFlowSelect1 {
				Range: gdm::sOutputFlowNodes;
			}
			ElementParameter epOutputFlowSelect2 {
				Range: gdm::sOutputFlowNodes;
			}
			ElementParameter epOutputFlowSelect3 {
				Range: gdm::sOutputFlowNodes;
			}
			ElementParameter epOutputFlowSelect4 {
				Range: gdm::sOutputFlowNodes;
			}
			ElementParameter epOperatingModeElementSelect {
				Range: gdm::sOperatingModeElements;
			}
			ElementParameter epStatusModeElementSelect1 {
				Range: gdm::sStatusModeElements;
			}
			ElementParameter epStatusModeElementSelect2 {
				Range: gdm::sStatusModeElements;
			}
			ElementParameter epStatusModeElementSelect3 {
				Range: gdm::sStatusModeElements;
			}
			Parameter p01OperatingModeAllowedInversed {
				IndexDomain: (gdm::iOperatingModeElement,gdm::iOperatingMode);
				Range: binary;
				Definition: {
					
					if max(gdm::itime, gdm::p01OperatingModeAllowed(gdm::iOperatingModeElement,gdm::iOperatingMode,gdm::iTime)) = 1 then
						0
					else
						1
					endif
				}
			}
			Parameter pSwitchingValueCal {
				IndexDomain: (gdm::iOperatingModeElement, gdm::iTime);
				Definition: {
					
					  gom::v01ElementInOperatingMode(gdm::iOperatingModeElement, gdm::epOperatingModeTypeOff, gdm::iTime) * 0
					+ gom::v01ElementInOperatingMode(gdm::iOperatingModeElement, gdm::epOperatingModeTypeColdStandBy, gdm::iTime) * 1
					+ gom::v01ElementInOperatingMode(gdm::iOperatingModeElement, gdm::epOperatingModeTypeStart, gdm::iTime) * 2
					+ gom::v01ElementInOperatingMode(gdm::iOperatingModeElement, gdm::epOperatingModeTypeUnloaded, gdm::iTime) * 3
					+ gom::v01ElementInOperatingMode(gdm::iOperatingModeElement, gdm::epOperatingModeTypeCoolDown, gdm::iTime) * 4
					+ gom::v01ElementInOperatingMode(gdm::iOperatingModeElement, gdm::epOperatingModeTypeArgonStart, gdm::iTime) * 5
					+ gom::v01ElementInOperatingMode(gdm::iOperatingModeElement, gdm::epOperatingModeTypeOn, gdm::iTime) * 6
				}
			}
			Parameter p01StatusOfv01 {
				IndexDomain: (gdm::iStatusModeElement, gdm::iTime);
				Definition: {
					  gom::v01Backup(gdm::iStatusModeElement, gdm::iTime)
					+ gom::v01Compressor(gdm::iStatusModeElement, gdm::iTime)
					+ gom::v01Box(gdm::iStatusModeElement, gdm::iTime)
					+ gom::v01Liquefier(gdm::iStatusModeElement, gdm::iTime)
				}
			}
		}
		DeclarationSection Coldbox_Declaration {
			Set sColdboxAllFlow {
				Index: iColdboxAllFlow;
				Definition: {
					
					data { AirHp, AirMp, AirTotal, HpGox, MpGox, LpGox, HpGan, MpGan, LpGan, Lin, Lox, Lar,
						InternalLiquid, TurbineLp, RectifPower, O2Recovery, ArRecovery, AirTurbineLp, GoxToWaste, WasteO2, WasteN2, Waste }
				}
			}
			ElementParameter epColdboxAllAirHp {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"AirHp")
				}
			}
			ElementParameter epColdboxAllAirMp {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"AirMp")
				}
			}
			ElementParameter epColdboxAllAirTotal {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"AirTotal")
				}
			}
			ElementParameter epColdboxAllHpGox {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"HpGox")
				}
			}
			ElementParameter epColdboxAllMpGox {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"MpGox")
				}
			}
			ElementParameter epColdboxAllLpGox {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"LpGox")
				}
			}
			ElementParameter epColdboxAllHpGan {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"HpGan")
				}
			}
			ElementParameter epColdboxAllMpGan {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"MpGan")
				}
			}
			ElementParameter epColdboxAllLpGan {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"LpGan")
				}
			}
			ElementParameter epColdboxAllLin {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"Lin")
				}
			}
			ElementParameter epColdboxAllLox {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"Lox")
				}
			}
			ElementParameter epColdboxAllLar {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"Lar")
				}
			}
			ElementParameter epColdboxAllInternalLiquid {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"InternalLiquid")
				}
			}
			ElementParameter epColdboxAllTurbineLp {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"TurbineLp")
				}
			}
			ElementParameter epColdboxAllRectifPower {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"RectifPower")
				}
			}
			ElementParameter epColdboxAllO2Recovery {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"O2Recovery")
				}
			}
			ElementParameter epColdboxAllArRecovery {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"ArRecovery")
				}
			}
			ElementParameter epColdboxAllAirTurbineLp {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"AirTurbineLp")
				}
			}
			ElementParameter epColdboxAllGoxToWaste {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"GoxToWaste")
				}
			}
			ElementParameter epColdboxAllWasteO2 {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"WasteO2")
				}
			}
			ElementParameter epColdboxAllWasteN2 {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"WasteN2")
				}
			}
			ElementParameter epColdboxAllWaste {
				Range: sColdboxAllFlow;
				Definition: {
					
					stringtoelement(sColdboxAllFlow,"Waste")
				}
			}
			ElementParameter epColdboxAllSelect1 {
				Range: sColdboxAllFlow;
			}
			StringParameter spColdboxAllSelect1 {
				Definition: epColdboxAllSelect1;
			}
			StringParameter spColdboxAllSelect1Vent {
				Definition: {
					if epColdboxAllSelect1 = 'Lin' or epColdboxAllSelect1 = 'lox' or epColdboxAllSelect1 = 'lar' then
						epColdboxAllSelect1 + "_Purge"
					elseif epColdboxAllSelect1 = 'HpGox' or epColdboxAllSelect1 = 'MpGox' or epColdboxAllSelect1 = 'LpGox'
					  or epColdboxAllSelect1 = 'HpGan' or epColdboxAllSelect1 = 'MpGan' or epColdboxAllSelect1 = 'LpGan' then
						epColdboxAllSelect1 + "_Vent"
					else
						""
					endif
				}
			}
			StringParameter spColdboxAllSelect1Min {
				Definition: epColdboxAllSelect1 + " Min";
			}
			StringParameter spColdboxAllSelect1Max {
				Definition: epColdboxAllSelect1 + " Max";
			}
			ElementParameter epColdboxAllSelect2 {
				Range: sColdboxAllFlow;
			}
			StringParameter spColdboxAllSelect2 {
				Definition: epColdboxAllSelect2;
			}
			StringParameter spColdboxAllSelect2Vent {
				Definition: {
					if epColdboxAllSelect2 = 'Lin' or epColdboxAllSelect2 = 'lox' or epColdboxAllSelect2 = 'lar' then
						epColdboxAllSelect2 + "_Purge"
					elseif epColdboxAllSelect2 = 'HpGox' or epColdboxAllSelect2 = 'MpGox' or epColdboxAllSelect2 = 'LpGox'
					  or epColdboxAllSelect2 = 'HpGan' or epColdboxAllSelect2 = 'MpGan' or epColdboxAllSelect2 = 'LpGan' then
						epColdboxAllSelect2 + "_Vent"
					else
						""
					endif
				}
			}
			StringParameter spColdboxAllSelect2Min {
				Definition: epColdboxAllSelect2 + " Min";
			}
			StringParameter spColdboxAllSelect2Max {
				Definition: epColdboxAllSelect2 + " Max";
			}
			ElementParameter epColdboxAllSelect3_1 {
				Range: sColdboxAllFlow;
			}
			StringParameter spColdboxAllSelect3_1 {
				Definition: epColdboxAllSelect3_1;
			}
			ElementParameter epColdboxAllSelect3_2 {
				Range: sColdboxAllFlow;
			}
			StringParameter spColdboxAllSelect3_2 {
				Definition: epColdboxAllSelect3_2;
			}
			ElementParameter epColdboxAllSelect3_3 {
				Range: sColdboxAllFlow;
			}
			StringParameter spColdboxAllSelect3_3 {
				Definition: epColdboxAllSelect3_3;
			}
			ElementParameter epColdboxAllSelect3_4 {
				Range: sColdboxAllFlow;
			}
			StringParameter spColdboxAllSelect3_4 {
				Definition: epColdboxAllSelect3_4;
			}
			Set sColdboxNodeConnectionTypeInputs {
				SubsetOf: gdm::sColdboxNodeConnectionTypes;
				Definition: {
					
					{ gdm::iColdboxNodeConnectionType | gdm::iColdboxNodeConnectionType in gdm::sBoxNodeConnectionTypeInputs }
				}
			}
			Set sColdboxNodeConnectionTypeOutputs {
				SubsetOf: gdm::sColdboxNodeConnectionTypes;
				Definition: {
					
					{ gdm::iColdboxNodeConnectionType | gdm::iColdboxNodeConnectionType in gdm::sBoxNodeConnectionTypeOutputs }
				}
			}
			ElementParameter epColdboxSelect {
				Range: gdm::sColdboxes;
			}
			ElementParameter epColdboxNodeConnectionTypeInputSelect {
				Range: sColdboxNodeConnectionTypeInputs;
			}
			ElementParameter epColdboxNodeTypeInputSelect {
				Range: gdm::sNodes;
				Definition: {
					
					gdm::epBoxNode(epColdboxSelect, epColdboxNodeConnectionTypeInputSelect)
				}
			}
			ElementParameter epColdboxNodeConnectionTypeOutputSelect {
				Range: sColdboxNodeConnectionTypeOutputs;
			}
			ElementParameter epColdboxNodeTypeOutputSelect {
				Range: gdm::sNodes;
				Definition: {
					
					gdm::epBoxNode(epColdboxSelect, epColdboxNodeConnectionTypeOutputSelect)
				}
			}
			Parameter pColdboxAllFlow {
				IndexDomain: (gdm::iColdbox, iColdboxAllFlow, gdm::iTime);
				Definition: {
					
					if iColdboxAllFlow = epColdboxAllAirHp then
						gom::vAirHp(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllAirMp then
						gom::vAirMp(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllAirTotal then
						gom::vAirHp(gdm::iColdbox, gdm::iTime) + gom::vAirMp(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllHpGox then
						gom::vHpGOx(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllMpGox then
						gom::vMpGOx(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLpGox then
						gom::vLpGOx(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllHpGan then
						gom::vHpGaN(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllMpGan then
						gom::vMpGaN(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLpGan then
						gom::vLpGaN(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLin then
						gom::vLin(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLox then
						gom::vLox(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLar then
						gom::vLar(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllInternalLiquid then
						gom::vInternalLiquid(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllTurbineLp then
						gom::vAirTurbineLp(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllRectifPower then
						gom::vRectificationPower(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllO2Recovery then
						gom::vO2Recovery(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllArRecovery then
						gom::vArRecovery(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllAirTurbineLp then
						gom::vAirTurbineLp(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllGoxToWaste then
						gom::vGOxToWaste(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllWasteO2 then
						gom::vWasteO2(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllWasteN2 then
						gom::vWasteN2(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllWaste then
						gom::vWaste(gdm::iColdbox, gdm::iTime)
					else
						0
					endif
				}
			}
			Parameter pColdboxAllFlow_vent {
				IndexDomain: (gdm::iColdbox, iColdboxAllFlow, gdm::iTime);
				Definition: {
					
					if iColdboxAllFlow = epColdboxAllHpGox then
						gom::vHpGOxvent(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllMpGox then
						gom::vMpGOxvent(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLpGox then
						gom::vLpGOxvent(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllHpGan then
						gom::vHpGaNvent(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllMpGan then
						gom::vMpGaNvent(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLpGan then
						gom::vLpGaNvent(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLin then
						gom::vLinpurge(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLox then
						gom::vLoxpurge(gdm::iColdbox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLar then
						gom::vLarpurge(gdm::iColdbox, gdm::iTime)
					else
						0
					endif
				}
			}
			Parameter pColdboxAllFlowMin {
				IndexDomain: (gdm::iColdbox, iColdboxAllFlow, gdm::iTime);
				Definition: {
					
					if iColdboxAllFlow = epColdboxAllAirHp then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeAirHp, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllAirMp then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeAirMp, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllAirTotal then
						gdm::pColdboxMinInternalFlow(gdm::iColdbox, gdm::epTotalAir, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllHpGox then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeHpGox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllMpGox then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeMpgox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLpGox then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeLpGox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllHpGan then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeHpGan, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllMpGan then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeMpGan, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLpGan then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeLpGan, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLin then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeLin, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLox then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeLox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLar then
						gdm::pBoxMinFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeLar, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllInternalLiquid then
						gdm::pColdboxMinInternalFlow(gdm::iColdbox, gdm::epInternalLiquid, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllTurbineLp then
						gdm::pColdboxMinInternalFlow(gdm::iColdbox, gdm::epAirTurbineLp, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllRectifPower then
						gdm::pColdboxMinRectifPower(gdm::iColdbox)
					elseif iColdboxAllFlow = epColdboxAllO2Recovery then
						0
					elseif iColdboxAllFlow = epColdboxAllArRecovery then
						0
					elseif iColdboxAllFlow = epColdboxAllAirTurbineLp then
						gdm::pColdboxMinInternalFlow(gdm::iColdbox, gdm::epAirTurbineLp, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllGoxToWaste then
						gdm::pColdboxMinInternalFlow(gdm::iColdbox, gdm::epGoxToWaste, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllWasteO2 then
						0
					elseif iColdboxAllFlow = epColdboxAllWasteN2 then
						0
					elseif iColdboxAllFlow = epColdboxAllWaste then
						0
					else
						0
					endif
				}
			}
			Parameter pColdboxAllFlowMax {
				IndexDomain: (gdm::iColdbox, iColdboxAllFlow, gdm::iTime);
				Definition: {
					
					if iColdboxAllFlow = epColdboxAllAirHp then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeAirHp, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllAirMp then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeAirMp, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllAirTotal then
						gdm::pColdboxMaxInternalFlow(gdm::iColdbox, gdm::epTotalAir, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllHpGox then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeHpGox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllMpGox then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeMpgox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLpGox then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeLpGox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllHpGan then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeHpGan, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllMpGan then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeMpGan, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLpGan then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeLpGan, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLin then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeLin, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLox then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeLox, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllLar then
						gdm::pBoxMaxFlow(gdm::iColdBox, gdm::epColdboxNodeConnectionTypeLar, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllInternalLiquid then
						gdm::pColdboxMaxInternalFlow(gdm::iColdbox, gdm::epInternalLiquid, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllTurbineLp then
						gdm::pColdboxMaxInternalFlow(gdm::iColdbox, gdm::epAirTurbineLp, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllRectifPower then
						gdm::pColdboxMaxRectifPower(gdm::iColdbox)
					elseif iColdboxAllFlow = epColdboxAllO2Recovery then
						0
					elseif iColdboxAllFlow = epColdboxAllArRecovery then
						0
					elseif iColdboxAllFlow = epColdboxAllAirTurbineLp then
						gdm::pColdboxMaxInternalFlow(gdm::iColdbox, gdm::epAirTurbineLp, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllGoxToWaste then
						gdm::pColdboxMaxInternalFlow(gdm::iColdbox, gdm::epGoxToWaste, gdm::iTime)
					elseif iColdboxAllFlow = epColdboxAllWasteO2 then
						0
					elseif iColdboxAllFlow = epColdboxAllWasteN2 then
						0
					elseif iColdboxAllFlow = epColdboxAllWaste then
						0
					endif
				}
			}
		}
		DeclarationSection Power_Declaration {
			Set sCompressorLiquefier {
				SubsetOf: gdm::sArcs;
				Index: iCompressorLiquefier;
				Definition: {
					
					{ gdm::iArc | gdm::epArcType( gdm::iArc ) = gdm::epArcTypeCompressor or gdm::epArcType( gdm::iArc ) = gdm::epArcTypeLiquefier }
				}
			}
			Parameter pPowerCompLique {
				IndexDomain: (iCompressorLiquefier, gdm::itime);
				Definition: {
					
					gom::vCompressorPower(iCompressorLiquefier, gdm::iTime)
					+
					sum(gdm::iOperatingMode, gom::vCompressorExtraPower(iCompressorLiquefier, gdm::iOperatingMode, gdm::iTime))
					+
					gom::vLiquefierPower(iCompressorLiquefier, gdm::iTime)
					+
					sum(gdm::iOperatingMode, gom::vLiquefierExtraPower(iCompressorLiquefier, gdm::iOperatingMode, gdm::iTime))
				}
			}
			Parameter pFlowCompLiqueMin {
				IndexDomain: (iCompressorLiquefier, gdm::itime);
				Definition: {
					
					gdm::pCompressorMinFlow(iCompressorLiquefier, gdm::iTime)
					+
					gdm::pLiquefierMinFlow(iCompressorLiquefier, gdm::iTime)
				}
			}
			Parameter pFlowCompLiqueMax {
				IndexDomain: (iCompressorLiquefier, gdm::itime);
				Definition: {
					
					gdm::pCompressorMaxFlow(iCompressorLiquefier, gdm::iTime)
					+
					gdm::pLiquefierMaxFlow(iCompressorLiquefier, gdm::iTime)
				}
			}
			ElementParameter epCompressorLiquefierSelect1 {
				Range: sCompressorLiquefier;
			}
			ElementParameter epCompressorLiquefierSelect2 {
				Range: sCompressorLiquefier;
			}
			ElementParameter epCompressorLiquefierSelect3 {
				Range: sCompressorLiquefier;
			}
			ElementParameter epCompressorLiquefierSelect4 {
				Range: sCompressorLiquefier;
			}
		}
	}
	Section Multiple_Cases_Result_Manager {
		DeclarationSection MRM_declaration {
			ElementParameter epNodeSelect {
				Range: gdm::sNodes;
			}
			StringParameter spmultiplecasename {
				IndexDomain: indexcurrentcaseselection;
				Definition: casefileurl(indexcurrentcaseselection);
			}
			Parameter p01SelectionMultiCAseOk {
				Range: binary;
				Definition: {
					if pNumberOfCasesSelected>1 and currentcase in currentcaseselection then
					0
					else
					1
					endif
				}
			}
			Parameter p01SelectionMultiCaseNotOk {
				Range: binary;
				Definition: 1-p01SelectionMultiCaseOk;
			}
			Parameter pNumberOfCasesSelected {
				Range: integer;
				Definition: count(indexcurrentcaseselection);
			}
			Set sSelectedCaseFiles {
				SubsetOf: AllCases;
			}
		}
		Procedure procCheckMRM {
			Body: {
				! Check Data management option
				! proccheckDataManagementStyle(); ! This procedure is not necessary for the AIMMs version up to 4.8 because there is only the "Disk Files and Folders" available to manage case.
				if spcurrentcase="" then
				! Information for user if current case is not yet saved
				DialogMessage(
						message : "Please first save the current case to be the reference for multiple cases comparison  " , 
						title   : "MRM warning" );
				
				! check that current case is solved
				CaseCommandSaveas; 
				endif;
				if spcurrentcase="" then
				! user has not saved current case --> abort MRM
				DialogMessage(
						message : "MRM requires an active case name" , 
						title   : "MRM Error" );
						HALT;
				endif;
				if pNumberOfCasesSelected<=1 or not (currentcase in currentcaseselection) then
				
				! Open DialogBox for cases selection
				casedialogselectMultiple(sSelectedCaseFiles);
				currentcaseselection:=sSelectedCaseFiles;
				! error message if #cases selected still <2
					if pNumberOfCasesSelected<=1 then
					DialogMessage(
						message : "There must be at least two selected cases" , 
						title   : "MRM Warning" );
						HALT;
					endif;
				endif;
				
				!Error message if current case is not selected
				if not currentcase in currentcaseselection then
				DialogMessage(
						message : "The current case must be in the selection list" , 
						title   : "MRM Warning" );
				HALT;
				endif;
			}
			DeclarationSection proc_internal_parameter {
				StringParameter sp_dms;
			}
		}
	}
	Section DisplayManager {
		DeclarationSection Option_Declaration {
			Parameter p01UserboxHideButton {
				InitialData: 1;
			}
			Parameter pLineSizeMenu {
				Range: integer;
				InitialData: 2;
			}
		}
		DeclarationSection Other_colors {
			ElementParameter epReadOnlyColor {
				Range: AllColors;
				Comment: "specific color element";
			}
			ElementParameter epSCADAColor {
				Range: AllColors;
				Comment: "specific color element";
			}
			ElementParameter epColorDifferentSimulation {
				Range: AllColors;
				Definition: stringToElement( AllColors, "Difference color - simulation" );
			}
			ElementParameter epColorAirCompressorRealModelized {
				Range: AllColors;
				Definition: stringToElement( AllColors, "Air compressor graph - Real Modelized" );
			}
			ElementParameter epColorAirCompressorMax {
				Range: AllColors;
				Definition: stringToElement( AllColors, "Air compressor graph - Max" );
			}
			ElementParameter epColorAirCompressorMin {
				Range: AllColors;
				Definition: stringToElement( AllColors, "Air compressor graph - Min" );
			}
			ElementParameter epColorAirCompressorActualRunning {
				Range: AllColors;
				Definition: stringToElement( AllColors, "Air compressor graph - Min" );
			}
			ElementParameter epColorAirCompressorActualAvailable {
				Range: AllColors;
				Definition: stringToElement( AllColors, "Air compressor graph - Actual Available" );
			}
			ElementParameter epBackgroundTextColor {
				Range: AllColors;
			}
			ElementParameter epForegroundTextColor {
				Range: AllColors;
			}
			ElementParameter epForegroundAltTextColor {
				Range: AllColors;
			}
			ElementParameter epBackgroundChartColor {
				Range: AllColors;
			}
			ElementParameter epForegroundChartColor {
				Range: AllColors;
			}
			ElementParameter epBackgroundGraphColor {
				Range: AllColors;
			}
			ElementParameter epBackgroundHeaderCheckboxColor {
				Range: AllColors;
			}
			ElementParameter epBackgroundCheckboxColor {
				Range: AllColors;
			}
			ElementParameter epForegroundCheckboxColor {
				Range: AllColors;
			}
			ElementParameter epIdentifierCheckboxColor {
				Range: AllColors;
			}
			ElementParameter epBackgroundButtonColor {
				Range: AllColors;
			}
			ElementParameter epForegroundButtonColor {
				Range: AllColors;
			}
			ElementParameter epBackgroundButtonRed {
				Range: AllColors;
			}
			ElementParameter epBackgroundButtonGreen {
				Range: AllColors;
			}
			ElementParameter epBackgroundButtonGray {
				Range: AllColors;
			}
			ElementParameter epBackgroundCompositeTableColor {
				Range: AllColors;
			}
			ElementParameter epForegroundCompositeTableColor {
				Range: AllColors;
			}
			ElementParameter epSelectionCompositeTableColor {
				Range: AllColors;
			}
			ElementParameter epIdentifierCompositeTableColor {
				Range: AllColors;
			}
			ElementParameter epOxygenChartColor {
				Range: AllColors;
			}
			ElementParameter epNitrogenChartColor {
				Range: AllColors;
			}
		}
		DeclarationSection Pivot_Table_Colors {
			ElementParameter epColumnAreaBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epColumnAreaGridFocusBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epColumnAreaGridFocusTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epColumnAreaHeaderBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epColumnAreaHeaderTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epColumnAreaLineColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epColumnAreaTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epColumnAreaAgregatorsBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epColumnAreaAgregatorsTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epContentBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epContentBarFillColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epContentTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGeneralBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGeneralBorderColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridAreaAltBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridAreaBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridAreaGridFocusBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridAreaGridFocusTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridAreaLineColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridAreaSecondLineColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridAreaSubHeaderColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridAreaTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridAreaAgregatorsBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridAreaAgregatorsTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridFocusBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epGridFocusTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epHeaderBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epHeaderTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epIndexBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epIndexTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epIndexAggregatorBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epOuterAreaLineColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epOuterAreaBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epOuterAreaGridFocusBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epOuterAreaGridFocusTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epOuterAreaHeaderBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epOuterAreaHeaderTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epOuterAreaTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epOuterAreaAgregatorsBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epOuterAreaAgregatorsTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epRowAreaBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epRowAreaGridFocusBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epRowAreaGridFocusTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epRowAreaHeaderBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epRowAreaHeaderTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epRowAreaLineColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epRowAreaTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epRowAreaAgregatorsBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epRowAreaAgregatorsTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
		}
		DeclarationSection Table_Colors {
			ElementParameter epTableBackgroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epTableForegroundColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epTableSelectionColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
			ElementParameter epTableDefaultTextColor {
				Range: AllColors;
				Comment: "specific color element for the pivots";
			}
		}
	}
	Section Example_data_for_example_pivot_table {
		DeclarationSection Example_declarations {
			Set sIndexI {
				SubsetOf: Integers;
				Index: iI;
				Definition: {
					{ 1, 2, 3}
				}
				Comment: "Example";
			}
			Set sIndexJ {
				Index: iJ;
				Definition: data { piet, jan, klaas };
				Comment: "Example";
			}
			Parameter pParameterA {
				IndexDomain: iI;
				Definition: data { 1 : 1,  2 : 4,  3 : 9 };
				Comment: "Example";
			}
			StringParameter spParameterB {
				IndexDomain: (iI,iJ);
				Definition: {
					data
					{ ( 1, piet  ) : "bli",  ( 1, jan   ) : "li" ,  ( 1, klaas ) : "i"  ,  ( 2, piet  ) : "bla",  ( 2, jan   ) : "la" ,
					  ( 2, klaas ) : "a"  ,  ( 3, piet  ) : "blu",  ( 3, jan   ) : "lu" ,  ( 3, klaas ) : "u"   }
				}
				Comment: "Example";
			}
		}
	}
	Section ProcedureSetupDataManager {
		Procedure procInitialize {
			Body: {
				!Add new user colors
				procAddNewUserColors();
				
				!Assign colors to element parameters used for coloring the pivot table
				odm::procAssignPivotTableColorScheme;
				
				!Assign other colors
				epReadOnlyColor := 'grey';
				epSCADAColor := 'blue';
				
				! affect the right
				procRightUserForDataManager();
			}
			Comment: {
				"Initilizes the pirot table template by:
				-Add new user colors
				-Assign colors to element parameters used for coloring the pivot table"
			}
		}
		Procedure procAddNewUserColors {
			Body: {
				if (StringToElement( AllColors, "Air Force Blue" ) <> '' ) then return; endif; !Colors are already defined.
				
				
				/*General*/
				usercoloradd("Air Force Blue",93,138,168);
				usercoloradd("Alizarin",227,38,54);
				usercoloradd("Amber",255,191,0);
				usercoloradd("Android Green",164,198,57);
				usercoloradd("Apple Green",141,182,0);
				usercoloradd("Apricot",251,206,177);
				usercoloradd("Aquamarine",127,255,212);
				usercoloradd("Army Green",75,83,32);
				usercoloradd("Arsenic",59,68,75);
				usercoloradd("Arylide Yellow",233,214,107);
				usercoloradd("Ash Grey",178,190,181);
				usercoloradd("Asparagus",135,169,107);
				usercoloradd("Atomic Tangerine",255,153,102);
				usercoloradd("Auburn",109,53,26);
				usercoloradd("Azure",0,127,255);
				usercoloradd("Baby Blue Eyes",161,202,241);
				usercoloradd("Baby Blue",137,207,240);
				usercoloradd("Baby Pink",244,194,194);
				usercoloradd("Banana Yellow",255,209,42);
				usercoloradd("Battleship Grey",132,132,130);
				usercoloradd("Bazaar",152,119,123);
				usercoloradd("Bistre",61,43,31);
				usercoloradd("Bleu De France",49,140,231);
				usercoloradd("Blond",250,240,190);
				usercoloradd("Blush",222,93,131);
				usercoloradd("Bole",121,68,59);
				usercoloradd("Boston University Red",204,0,0);
				usercoloradd("Brass",181,166,66);
				usercoloradd("Bright Green",102,255,0);
				usercoloradd("Bright Lavender",191,148,228);
				usercoloradd("Bright Maroon",195,33,72);
				usercoloradd("Bright Pink",255,0,127);
				usercoloradd("Bright Turquoise",8,232,222);
				usercoloradd("Bright Ube",209,159,232);
				usercoloradd("British Racing Green",0,66,37);
				usercoloradd("Bronze",205,127,50);
				usercoloradd("Brown",150,75,0);
				usercoloradd("Bubble Gum",255,193,204);
				usercoloradd("Buff",240,220,130);
				usercoloradd("Burgundy",128,0,32);
				usercoloradd("Burlywood",222,184,135);
				usercoloradd("Burnt Orange",204,85,0);
				usercoloradd("Burnt Sienna",233,116,81);
				usercoloradd("Burnt Umber",138,51,36);
				usercoloradd("Byzantine",189,51,164);
				usercoloradd("Byzantium",112,41,99);
				usercoloradd("Cadet",83,104,120);
				usercoloradd("Cadmium Green",0,107,60);
				usercoloradd("Cadmium Orange",237,135,45);
				usercoloradd("Cadmium Red",227,0,34);
				usercoloradd("Cambridge Blue",163,193,173);
				usercoloradd("Camouflage Green",120,134,107);
				usercoloradd("Canary Yellow",255,239,0);
				usercoloradd("Candy Apple Red",255,8,0);
				usercoloradd("Cardinal",196,30,58);
				usercoloradd("Caribbean Green",0,204,153);
				usercoloradd("Carmine",150,0,24);
				usercoloradd("Carolina Blue",153,186,221);
				usercoloradd("Carrot Orange",237,145,33);
				usercoloradd("Ceil",146,161,207);
				usercoloradd("Celadon",172,225,175);
				usercoloradd("Cerulean Blue",42,82,190);
				usercoloradd("Cerulean",0,123,167);
				usercoloradd("Chamoisee",160,120,90);
				usercoloradd("Champagne",247,231,206);
				usercoloradd("Charcoal",54,69,79);
				usercoloradd("Chartreuse",223,255,0);
				usercoloradd("Cherry Blossom Pink",255,183,197);
				usercoloradd("Cherry",222,49,99);
				usercoloradd("Chestnut",205,92,92);
				usercoloradd("Chocolate",123,63,0);
				usercoloradd("Chrome Yellow",255,167,0);
				usercoloradd("Cinereous",152,129,123);
				usercoloradd("Cinnabar",227,66,52);
				usercoloradd("Cinnamon",210,105,30);
				usercoloradd("Citrine",228,208,10);
				usercoloradd("Classic Rose",251,204,231);
				usercoloradd("Clover",0,255,111);
				usercoloradd("Cobalt",0,71,171);
				usercoloradd("Columbia Blue",155,221,255);
				usercoloradd("Cool Black",0,46,99);
				usercoloradd("Cool Grey",140,146,172);
				usercoloradd("Copper",184,115,51);
				usercoloradd("Coquelicot",255,56,0);
				usercoloradd("Coral",255,127,80);
				usercoloradd("Cordovan",137,63,69);
				usercoloradd("Corn",251,236,93);
				usercoloradd("Cornell Red",179,27,27);
				usercoloradd("Cornflower Blue",100,149,237);
				usercoloradd("Crimson",220,20,60);
				usercoloradd("Daffodil",255,255,49);
				usercoloradd("Dandelion",240,225,48);
				usercoloradd("Dark Blue",0,0,139);
				usercoloradd("Dark Brown",101,67,33);
				usercoloradd("Dark Byzantium",93,57,84);
				usercoloradd("Dark Candy Apple Red",164,0,0);
				usercoloradd("Dark Cerulean",8,69,126);
				usercoloradd("Dark Chestnut",152,105,96);
				usercoloradd("Dark Coral",205,91,69);
				usercoloradd("Dark Cyan",0,139,139);
				usercoloradd("Dark Goldenrod",184,134,11);
				usercoloradd("Dark Green",1,50,32);
				usercoloradd("Dark Jungle Green",26,36,33);
				usercoloradd("Dark Khaki",189,183,107);
				usercoloradd("Dark Lava",72,60,50);
				usercoloradd("Dark Lavender",115,79,150);
				usercoloradd("Dark Magenta",139,0,139);
				usercoloradd("Dark Midnight Blue",0,51,102);
				usercoloradd("Dark Olive Green",85,107,47);
				usercoloradd("Dark Orange",255,140,0);
				usercoloradd("Dark Pastel Blue",119,158,203);
				usercoloradd("Dark Pastel Green",3,192,60);
				usercoloradd("Dark Pastel Purple",150,111,214);
				usercoloradd("Dark Pastel Red",194,59,34);
				usercoloradd("Dark Pink",231,84,128);
				usercoloradd("Dark Powder Blue",0,51,153);
				usercoloradd("Dark Raspberry",135,38,87);
				usercoloradd("Dark Salmon",233,150,122);
				usercoloradd("Dark Scarlet",86,3,25);
				usercoloradd("Dark Sienna",60,20,20);
				usercoloradd("Dark Slate Gray",47,79,79);
				usercoloradd("Dark Spring Green",23,114,69);
				usercoloradd("Dark Tan",145,129,81);
				usercoloradd("Dark Tangerine",255,168,18);
				usercoloradd("Dark Terra Cotta",204,78,92);
				usercoloradd("Dark Violet",148,0,211);
				usercoloradd("Davy'S Grey",85,85,85);
				usercoloradd("Denim",21,96,189);
				usercoloradd("Desert",193,154,107);
				usercoloradd("Desert Sand",237,201,175);
				usercoloradd("Dim Gray",105,105,105);
				usercoloradd("Dollar Bill",133,187,101);
				usercoloradd("Duke Blue",0,0,156);
				usercoloradd("Earth Yellow",225,169,95);
				usercoloradd("Eggplant",97,64,81);
				usercoloradd("Emerald",80,200,120);
				usercoloradd("Fawn",229,170,112);
				usercoloradd("Ferrari Red",255,28,0);
				usercoloradd("Fire Engine Red",206,22,32);
				usercoloradd("Firebrick",178,34,34);
				usercoloradd("Flame",226,88,34);
				usercoloradd("Flamingo Pink",252,142,172);
				usercoloradd("Flavescent",247,233,142);
				usercoloradd("Forest Green",1,68,33);
				usercoloradd("Gamboge",228,155,15);
				usercoloradd("Ghost White",248,248,255);
				usercoloradd("Glaucous",96,130,182);
				usercoloradd("Golden Brown",153,101,21);
				usercoloradd("Golden Yellow",255,223,0);
				usercoloradd("Goldenrod",218,165,32);
				usercoloradd("Gray",128,128,128);
				usercoloradd("Iceberg",113,166,210);
				usercoloradd("Icterine",252,247,94);
				usercoloradd("Inchworm",178,236,93);
				usercoloradd("India Green",19,136,8);
				usercoloradd("Indian Red",255,92,92);
				usercoloradd("Indian Yellow",227,168,87);
				usercoloradd("International Klein Blue",0,47,167);
				usercoloradd("Jade",0,168,107);
				usercoloradd("Jasper",215,59,62);
				usercoloradd("Khaki",195,176,145);
				usercoloradd("Lavender",181,126,220);
				usercoloradd("Lavender Blue",204,204,255);
				usercoloradd("Lavender Blush",255,240,245);
				usercoloradd("Lavender Gray",196,195,208);
				usercoloradd("Lawn Green",124,252,0);
				usercoloradd("Lemon",255,247,0);
				usercoloradd("Lime",191,255,0);
				usercoloradd("Mahogany",192,64,0);
				usercoloradd("Maroon",128,0,0);
				usercoloradd("Midnight Blue",25,25,112);
				usercoloradd("Mint",62,180,137);
				usercoloradd("Mustard",255,219,88);
				usercoloradd("Ochre",204,119,34);
				usercoloradd("Olive",128,128,0);
				usercoloradd("Orange",255,127,0);
				usercoloradd("Oxford Blue",0,33,71);
				usercoloradd("Pastel Blue",174,198,207);
				usercoloradd("Pastel Brown",131,105,83);
				usercoloradd("Pastel Gray",207,207,196);
				usercoloradd("Pastel Green",119,221,119);
				usercoloradd("Pastel Magenta",244,154,194);
				usercoloradd("Pastel Orange",255,179,71);
				usercoloradd("Pastel Pink",255,209,220);
				usercoloradd("Pastel Purple",179,158,181);
				usercoloradd("Pastel Red",255,105,97);
				usercoloradd("Pastel Violet",203,153,201);
				usercoloradd("Pastel Yellow",253,253,150);
				usercoloradd("Peach",255,229,180);
				usercoloradd("Pear",209,226,49);
				usercoloradd("Pearl",240,234,214);
				usercoloradd("Peridot",230,226,0);
				usercoloradd("Pine Green",1,121,111);
				usercoloradd("Pink",255,192,203);
				usercoloradd("Pistachio",147,197,114);
				usercoloradd("Plum",142,69,133);
				usercoloradd("Portland Orange",255,90,54);
				usercoloradd("Prune",112,28,28);
				usercoloradd("Pumpkin",255,117,24);
				usercoloradd("Purple Heart",105,53,156);
				usercoloradd("Raspberry",227,11,93);
				usercoloradd("Raw Umber",130,102,68);
				usercoloradd("Rifle Green",65,72,51);
				usercoloradd("Rosewood",101,0,11);
				usercoloradd("Royal Blue",0,35,102);
				usercoloradd("Ruby",224,17,95);
				usercoloradd("Rust",183,65,14);
				usercoloradd("Safety Orange",255,103,0);
				usercoloradd("Saffron",244,196,48);
				usercoloradd("Salmon",255,140,105);
				usercoloradd("Sand",194,178,128);
				usercoloradd("Sand Dune",150,113,23);
				usercoloradd("Sandstorm",236,213,64);
				usercoloradd("Sapphire",8,37,103);
				usercoloradd("Seal Brown",50,20,20);
				usercoloradd("Sepia",112,66,20);
				usercoloradd("Shadow",138,121,93);
				usercoloradd("Silver",192,192,192);
				usercoloradd("Sinopia",203,65,11);
				usercoloradd("Sky Blue",135,206,235);
				usercoloradd("Sky Magenta",207,113,175);
				usercoloradd("Spring Bud",167,252,0);
				usercoloradd("Steel Blue",70,130,180);
				usercoloradd("Straw",228,217,111);
				usercoloradd("Sunset",250,214,165);
				usercoloradd("Tangerine",242,133,0);
				usercoloradd("Teal",0,128,128);
				usercoloradd("Terra Cotta",226,114,91);
				usercoloradd("Titanium Yellow",238,230,0);
				usercoloradd("Tropical Rain Forest",0,117,94);
				usercoloradd("Turquoise",48,213,200);
				usercoloradd("Ultramarine",18,10,143);
				usercoloradd("United Nations Blue",91,146,229);
				usercoloradd("Vanilla",243,229,171);
				usercoloradd("Wheat",245,222,179);
				usercoloradd("Xanadu",115,134,120);
				usercoloradd("Yale Blue",15,77,146);
				usercoloradd("Amaranth",229,43,80);
				
				! New Light Colors
				usercoloradd("LightGreen",0,214,153);
				usercoloradd("LightBlack",48,48,48);
				usercoloradd("LightRed",255,128,128);
				usercoloradd("LightBlue",0,160,255);
				
				/*Air liquide specific*/
				usercoloradd("Air Liquide blue", 0, 112, 178);
				usercoloradd("Air Liquide red", 235, 4, 56);
				
				! Define color used on the simulation input screens
				usercoloradd("Difference color - simulation", 250, 220, 140);
				
				! Define colors used on the simulation output air compressor graph
				usercoloradd("Air compressor graph - Real Modelized", 150, 220, 240);
				usercoloradd("Air compressor graph - Max", 255, 255, 255);
				usercoloradd("Air compressor graph - Min", 140, 15, 120);
				usercoloradd("Air compressor graph - Actual Running", 40, 175, 80);
				usercoloradd("Air compressor graph - Actual Available", 250, 5, 25);
				usercoloradd("Air compressor graph - Green", 0, 128, 0);
				
				/* Air liquide specific ALFI */
				usercoloradd("ALFIBackgroundDisplay", 48, 48, 48);
				usercoloradd("ALFIBackgroundFirstLineAlarm", 89, 89, 89);
				usercoloradd("ALFIBackgroundAlarme1", 170, 170, 170);
				usercoloradd("ALFIBackgroundAlarme2", 210, 210, 210);
				! COOD Color Simulator Display
				usercoloradd("COOD_LAR",255,155,0);
				usercoloradd("COOD_GAN",0,214,153);
				usercoloradd("COOD_GOX",0,160,255);
				usercoloradd("COOD_LIN",0,138,99);
				usercoloradd("COOD_LOX",0,106,172);
				usercoloradd("COOD_AIR",175,128,79);
				usercoloradd("COOD_ORL",125,96,160);
				usercoloradd("COOD_WN2",205,98,9);
				usercoloradd("COOD_OGI",180,250,250);
			}
			Comment: "Add a large number of colors to the set of user colors";
		}
		Procedure procAssignPivotTableColorScheme {
			Body: {
				empty Pivot_Table_Colors;
				/* This is the CQM-color scheme */
				/*General*/
				epGeneralBorderColor := 'ALFIBackgroundFirstLineAlarm';
				epGeneralBackgroundColor := 'ALFIBackgroundDisplay';
				
				/*Backgound colors*/
				epColumnAreaBackgroundColor := 'ALFIBackgroundFirstLineAlarm';
				epContentBackgroundColor := 'ALFIBackgroundAlarme1';
				epGridAreaAltBackgroundColor := 'ALFIBackgroundAlarme2';
				epGridAreaBackgroundColor := 'ALFIBackgroundAlarme1';
				epOuterAreaBackgroundColor := 'LightBlue';
				epRowAreaBackgroundColor := 'ALFIBackgroundAlarme1';
				
				/*Tekst colors*/
				epColumnAreaTextColor := 'white';
				epContentTextColor := 'black';
				epOuterAreaTextColor := 'black';
				epRowAreaTextColor := 'black';
				epGridAreaTextColor := 'black';
				
				/*Bar fill color*/
				epContentBarFillColor := 'LightGreen'; !'Green';
				
				/*Line color*/
				epOuterAreaLineColor := 'light grey';
				epColumnAreaLineColor := epOuterAreaLineColor;
				epRowAreaLineColor := epOuterAreaLineColor;
				epGridAreaLineColor := epOuterAreaLineColor;
				
				/*Header background color*/
				epHeaderBackgroundColor := 'ALFIBackgroundFirstLineAlarm';
				epColumnAreaHeaderBackgroundColor := epHeaderBackgroundColor;
				epOuterAreaHeaderBackgroundColor := epHeaderBackgroundColor;
				epRowAreaHeaderBackgroundColor := epHeaderBackgroundColor;
				epGridAreaSubHeaderColor := epHeaderBackgroundColor;
				
				/*Header text color*/
				epHeaderTextColor := 'white';
				epColumnAreaHeaderTextColor := epHeaderTextColor;
				epOuterAreaHeaderTextColor := epHeaderTextColor;
				epRowAreaHeaderTextColor := epHeaderTextColor;
				
				/*Grid focus background color*/
				epGridFocusBackgroundColor := 'LightGreen';
				epColumnAreaGridFocusBackgroundColor := epGridFocusBackgroundColor ;
				epGridAreaGridFocusBackgroundColor := epGridFocusBackgroundColor ;
				epOuterAreaGridFocusBackgroundColor := epGridFocusBackgroundColor ;
				epRowAreaGridFocusBackgroundColor := epGridFocusBackgroundColor ;
				
				/*Grid focus text color*/
				epGridFocusTextColor := 'black';
				epColumnAreaGridFocusTextColor := epGridFocusTextColor;
				epGridAreaGridFocusTextColor := epGridFocusTextColor;
				epOuterAreaGridFocusTextColor := epGridFocusTextColor;
				epRowAreaGridFocusTextColor := epGridFocusTextColor;
				
				/*Back Text color*/
				epBackgroundTextColor := 'ALFIBackgroundAlarme2';
				epForegroundTextColor := 'ALFIBackgroundDisplay';
				epForegroundAltTextColor := 'white';
				
				/*Back Chart color*/
				epBackgroundChartColor := 'ALFIBackgroundAlarme1';
				epForegroundChartColor := 'ALFIBackgroundDisplay';
				epBackgroundGraphColor := 'LightBlack';
				
				/*Elements Chart color*/
				epOxygenChartColor := 'LightBlue';
				epNitrogenChartColor := 'LightGreen';
				
				/*Back Checkboxes color*/
				epBackgroundHeaderCheckboxColor := 'ALFIBackgroundAlarme2';
				epBackgroundCheckboxColor := 'ALFIBackgroundAlarme1';
				epForegroundCheckboxColor := 'ALFIBackgroundDisplay';
				epIdentifierCheckboxColor := 'ALFIBackgroundDisplay';
				
				/*Back Buttons color*/
				epBackgroundButtonColor := 'ALFIBackgroundAlarme1';
				epForegroundButtonColor := 'ALFIBackgroundDisplay';
				epBackgroundButtonRed := 'LightRed';
				epBackgroundButtonGreen := 'LightGreen';
				epBackgroundButtonGray := epBackgroundButtonColor;
				
				/*Back Composite Table color*/
				epBackgroundCompositeTableColor := epContentBackgroundColor;
				epForegroundCompositeTableColor := 'black'; !epColumnAreaTextColor;
				epSelectionCompositeTableColor := epIndexTextColor;
				epIdentifierCompositeTableColor := epForegroundCompositeTableColor;
				
				/*Grid Area Agregators Table color*/
				! epOuterAreaAgregatorsBackgroundColor := 'LightRed';
				! epOuterAreaAgregatorsTextColor := 'black';
				epGridAreaAgregatorsBackgroundColor := 'LightRed';
				epGridAreaAgregatorsTextColor := 'black';
				epColumnAreaAgregatorsBackgroundColor := epColumnAreaBackgroundColor;
				epColumnAreaAgregatorsTextColor := 'white';
				epRowAreaAgregatorsBackgroundColor := epRowAreaBackgroundColor;
				epRowAreaAgregatorsTextColor := 'black';
				
				/*Simple Table color*/
				epTableBackgroundColor := 'ALFIBackgroundDisplay';
				epTableForegroundColor := 'ALFIBackgroundAlarme1';
				epTableSelectionColor := 'Air Liquide blue';
				epTableDefaultTextColor := 'LightRed';
			}
			Comment: "Assigning colors to element parameters used for coloring the pivot table";
		}
		Procedure procSaveTemplateExcel {
			Body: {
				! Copy all the time table parameter in the Time Dependent Parameter
				odm::procUpdateTimeDependentDataWithGeneralData();
				
				! call proc write to Excel udm
				udm::procSaveToExcelButton_udm();
			}
			StringParameter spExcelFile;
		}
		Procedure procCheckDataManagementStyle {
			Body: {
				! Check Data management option
				
				! This procedure is not necessary for the AIMMs version up to 4.8 because there is only the "Disk Files and Folders" available to manage case.
				
				!OptionGetString("Data Management Style", sp_dms);
				!        if sp_dms = "Disk Files and Folders" then
				!
				!            ! Creaye "Data" folder if it doesn't exist.
				!            if not DirectoryExists( "data" ) then
				!                DirectoryCreate("data");
				!            endif ;
				!         else
				!	! Data management option not right, display message for change and stop procedures
				!            DialogMessage(
				!		message : "The Data Management style must be Disk and Folders. Change the project option accordingly (settings/project options/Data Manager)" , 
				!		title   : "Case Error" );
				!		HALT;
				!        endif;
				!
			}
			DeclarationSection proc_internal_parameter {
				StringParameter sp_dms;
			}
		}
		Procedure procClearCurrentcase {
			Body: {
				caseFileSetCurrent("");
			}
		}
	}
}
