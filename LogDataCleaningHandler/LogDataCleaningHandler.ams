## ams_version=1.0

LibraryModule LogDataCleaningHandler {
	Prefix: log_data_cleaning;
	Interface: {
		data { procLogDataCleaner, procLogDataCleanerSCADAmissing, procCleanLogDataCleaning, 
		       sDataCleaningLogs, spDataCleaningLogMessage }
	}
	Section Data_Cleaning_Logging {
		Set sDataCleaningLogs {
			SubsetOf: Integers;
			Index: iDataCleaningLog;
			Comment: "Auto id on logging for data cleaning";
		}
		StringParameter spDataCleaningLogMessage {
			IndexDomain: iDataCleaningLog;
			Comment: "Data cleaning log message";
		}
	}
	Section Data_Cleaning_Handler {
		Procedure procLogDataCleaner {
			Arguments: (pLogMessageSeverity,spLogMessageVariant,spLogMessageText);
			Body: {
				!Pass message to log message handler
				log_message::procLogMessage(
					splLogMessageType :  "Data cleaner",
					plLogMessageSeverity : pLogMessageSeverity,
					splLogMessageSolutionVariant : spLogMessageVariant,
					splLogMessageText :  spLogMessageText,
					plLogMessageValue : 0
					);
				
				!Create a datacleaning log id
				setElementAdd( sDataCleaningLogs, epNewLog,
					formatstring( "%n",
						max(1,max(iDataCleaningLog,val(iDataCleaningLog))+1) !Either 0 or the next int
						)
					);
				
				!Store values
				spDataCleaningLogMessage(epNewLog) := spLogMessageText;
			}
			Comment: "Add log message related to data cleaning (from scada";
			ElementParameter epNewLog {
				Range: sDataCleaningLogs;
				Comment: "Automatic log id";
			}
			Parameter pLogMessageSeverity {
				Range: integer;
				Property: Input;
				Comment: "Severity";
			}
			StringParameter spLogMessageText {
				Property: Input;
				Comment: "Message";
			}
			StringParameter spLogMessageVariant {
				Property: Input;
			}
		}
		Procedure procLogDataCleanerSCADAmissing {
			Arguments: (pLogMessageSeverity,spLogMessageText,spModelIndex,spScadaRef);
			Body: {
				!Pass message to log message handler
				log_message::procLogMessage(
					splLogMessageType :  "Data cleaner",
					plLogMessageSeverity : pLogMessageSeverity,
					splLogMessageSolutionVariant : "",
					splLogMessageText :  spLogMessageText + " - " + spModelIndex + " - " + spScadaRef,
					plLogMessageValue : 0
					);
				
				!Create a log id
				setElementAdd( sDataCleaningLogs, epNewLog,
					formatstring( "%n",
						max(1,max(iDataCleaningLog,val(iDataCleaningLog))+1) !Either 0 or the next int
						)
					);
				!Store values
				spDataCleaningLogMessage(epNewLog) := spLogMessageText + " - " + spModelIndex + " - " + spScadaRef;
			}
			Comment: "Add dat cleaner log";
			ElementParameter epNewLog {
				Range: sDataCleaningLogs;
				Comment: "automatic log id";
			}
			Parameter pLogMessageSeverity {
				Range: integer;
				Property: Input;
				Comment: "severity";
			}
			StringParameter spLogMessageText {
				Property: Input;
				Comment: "message";
			}
			StringParameter spModelIndex {
				Property: Input;
				Comment: "Mapping related to this model entity";
			}
			StringParameter spScadaRef {
				Property: Input;
				Comment: "Scada ref of the mapping";
			}
		}
		Procedure procCleanLogDataCleaning {
			Body: {
				spDataCleaningLogMessage(iDataCleaningLog) := "";
				sDataCleaningLogs := {};
			}
			Comment: "Empty data cleaning log messages";
		}
	}
	Section Unit_Test {
		Procedure procUnitTest {
			Body: {
				procLogDataCleaner(
					pLogMessageSeverity         :  1 , 
					spLogMessageVariant 	    :  "", 
					spLogMessageText            :  "strange stuff" );
			}
		}
	}
}
