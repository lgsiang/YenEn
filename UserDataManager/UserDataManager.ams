## ams_version=1.0

LibraryModule UserDataManager {
	Prefix: udm;
	Interface: {
		data { sUserBoxNodeConnectionTypes, epUserBoxIn1, epUserBoxIn2, epUserBoxIn3, epUserBoxIn4, 
		       epUserBoxIn5, epUserBoxIn6, epUserBoxIn7, epUserBoxIn8, epUserBoxIn9, epUserBoxIn10, 
		       epUserBoxOut1, epUserBoxOut2, epUserBoxOut3, epUserBoxOut4, epUserBoxOut5, 
		       epUserBoxOut6, epUserBoxOut7, epUserBoxOut8, epUserBoxOut9, epUserBoxOut10, 
		       sUserBoxes, epBoxTypeUserBox, sUserboxParameters, epUserBoxParameter1, epUserBoxParameter2, 
		       epUserBoxParameter3, epUserBoxParameter4, epUserBoxParameter5, epUserBoxParameter6, 
		       epUserBoxParameter7, epUserBoxParameter8, epUserBoxParameter9, epUserBoxParameter10, 
		       epUserBoxParameterLinear1, epUserBoxParameterLinear2, epUserBoxParameterLinear3, 
		       epUserBoxParameterLinear4, epUserBoxParameterLinear5, epUserBoxParameterLinear6, 
		       epUserBoxParameterLinear7, epUserBoxParameterLinear8, epUserBoxParameterLinear9, 
		       epUserBoxParameterLinear10, procCheckData_udm, pUserParameterConstant, pUserParameterTimeDependent, 
		       p01TimeDependentUserParameter, procInitializeTimeDependentData_udm, procDefineTables_udm, 
		       procDefineTablesResult_udm, procReadFromExcelButton_udm, procSaveToExcelButton_udm, 
		       procWriteToExcelButton_udm, epSelectedDatabaseType, spSchemaName, spConnectionStringWrite, 
		       p01InitDataReadOnly, procConnectionDataBase_udm, procCreateConnectionStringWrite, 
		       procReadDataBase, procReadDataBaseButton_udm, procWriteDataBaseButton_udm, 
		       procEmptyAllData_udm, procControlModeElementSetDefinition_udm }
	}
	Section Data_declaration_for_user_specifics {
		Section box_type_userbox_data {
			DeclarationSection Alias_UserBox_connection_type_declaration {
				Set sUserBoxNodeConnectionTypes {
					SubsetOf: gdm::sBoxNodeConnectionTypes;
					Index: iUserBoxConnectionType;
					Definition: {
						{ epUserBoxIn1,
						epUserBoxIn2,
						epUserBoxIn3,
						epUserBoxIn4,
						epUserBoxIn5,
						epUserBoxIn6,
						epUserBoxIn7,
						epUserBoxIn8,
						epUserBoxIn9,
						epUserBoxIn10,
						epUserBoxOut1,
						epUserBoxOut2,
						epUserBoxOut3,
						epUserBoxOut4,
						epUserBoxOut5,
						epUserBoxOut6,
						epUserBoxOut7,
						epUserBoxOut8,
						epUserBoxOut9,
						epUserBoxOut10
						 }
					}
					Comment: "List here the connection node of UserBox that are renamed through aliases";
				}
				ElementParameter epUserBoxIn1 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeInput1;
				}
				ElementParameter epUserBoxIn2 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeInput2;
				}
				ElementParameter epUserBoxIn3 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeInput3;
				}
				ElementParameter epUserBoxIn4 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeInput4;
				}
				ElementParameter epUserBoxIn5 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeInput5;
				}
				ElementParameter epUserBoxIn6 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeInput6;
				}
				ElementParameter epUserBoxIn7 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeInput7;
				}
				ElementParameter epUserBoxIn8 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeInput8;
				}
				ElementParameter epUserBoxIn9 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeInput9;
				}
				ElementParameter epUserBoxIn10 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeInput10;
				}
				ElementParameter epUserBoxOut1 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeoutput1;
				}
				ElementParameter epUserBoxOut2 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeoutput2;
				}
				ElementParameter epUserBoxOut3 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeoutput3;
				}
				ElementParameter epUserBoxOut4 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeoutput4;
				}
				ElementParameter epUserBoxOut5 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeoutput5;
				}
				ElementParameter epUserBoxOut6 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeoutput6;
				}
				ElementParameter epUserBoxOut7 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeoutput7;
				}
				ElementParameter epUserBoxOut8 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeoutput8;
				}
				ElementParameter epUserBoxOut9 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeoutput9;
				}
				ElementParameter epUserBoxOut10 {
					Range: gdm::sBoxNodeConnectionTypes;
					Definition: gdm::epBoxNodeConnectionTypeoutput10;
				}
			}
			DeclarationSection UserBox_type_declaration {
				Set sUserBoxes {
					SubsetOf: gdm::sBoxes;
					Index: iUserbox, iUserbox2;
					Definition: {
						{ gdm::iBox | gdm::epBoxType( gdm::iBox ) = epBoxTypeUserBox  }
					}
				}
				ElementParameter epBoxTypeUserBox {
					Range: gdm::sBoxTypes;
					Definition: stringtoelement(gdm::sBoxTypes,"UserBox");
				}
			}
			DeclarationSection UserBox_Parameter_Declaration {
				Set sUserboxParameters {
					SubsetOf: gdm::sBoxParameters;
					Index: iUserBoxParameter;
					OrderBy: iUserBoxParameter;
					Definition: {
						{gdm::iBoxParameter | gdm::epBoxTypeParameter(gdm::iBoxParameter)=epBoxTypeUserbox}
					}
				}
				ElementParameter epUserBoxParameter1 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_Par1");
				}
				ElementParameter epUserBoxParameter2 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_Par2");
				}
				ElementParameter epUserBoxParameter3 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_Par3");
				}
				ElementParameter epUserBoxParameter4 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_Par4");
				}
				ElementParameter epUserBoxParameter5 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_Par5");
				}
				ElementParameter epUserBoxParameter6 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_Par6");
				}
				ElementParameter epUserBoxParameter7 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_Par7");
				}
				ElementParameter epUserBoxParameter8 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_Par8");
				}
				ElementParameter epUserBoxParameter9 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_Par9");
				}
				ElementParameter epUserBoxParameter10 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_Par10");
				}
				ElementParameter epUserBoxParameterLinear1 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_LinearPar1");
				}
				ElementParameter epUserBoxParameterLinear2 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_LinearPar2");
				}
				ElementParameter epUserBoxParameterLinear3 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_LinearPar3");
				}
				ElementParameter epUserBoxParameterLinear4 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_LinearPar4");
				}
				ElementParameter epUserBoxParameterLinear5 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_LinearPar5");
				}
				ElementParameter epUserBoxParameterLinear6 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_LinearPar6");
				}
				ElementParameter epUserBoxParameterLinear7 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_LinearPar7");
				}
				ElementParameter epUserBoxParameterLinear8 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_LinearPar8");
				}
				ElementParameter epUserBoxParameterLinear9 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_LinearPar9");
				}
				ElementParameter epUserBoxParameterLinear10 {
					Range: gdm::sBoxParameters;
					Definition: stringtoelement(gdm::sBoxParameters,"UserBox_LinearPar10");
				}
			}
		}
	}
	Procedure procCheckData_udm {
		Body: {
			/**************
			Check the data and creates messages for failed checks
			- First check the general data
			- Second check the specific data
			**************/
			
			
			!Check general data
			gdm::procCheckData;
			
			!!!! Make sure you update content inside {}
			sAllDataIdentifiers := {};
			
			gdm::procCheckElementParameters(sAllDataIdentifiers);
			
			!Check user specific data
			
			/***
			describe here the check procedure
			- Check if 
			- Check if 
			- Check if 
			- Check if 
			***/
			! Insert here your check procedure
		}
		Comment: "This function does some basic checks on the validity of data";
		Set sAllDataIdentifiers {
			SubsetOf: AllIdentifiers;
		}
	}
	Section Read_write_procedures_udm {
		Section Declaration_Time_Dependent_Parameters {
			DeclarationSection User_Time_Declaration {
				Parameter pUserParameterConstant {
					Default: 0;
				}
				Parameter pUserParameterTimeDependent {
					IndexDomain: (gdm::iTime);
					Default: 0;
				}
				Parameter p01TimeDependentUserParameter {
					IndexDomain: (gdm::iTime);
					Range: binary;
					Default: 0;
				}
			}
			Procedure procInitializeTimeDependentData_udm {
				Body: {
					!!!! This procedure is the link between the parameters read from excel and the parameters used in the model (uom) !!!!!
					
					! User Parameter
					! udm::pUserParameter(gdm::iTime) := udm::pUserParameterConstant*(1 - udm::p01TimeDependentUserParameter(gdm::iTime)) +
					! 				                 udm::pUserParameterTimeDependent(gdm::iTime)*udm::p01TimeDependentUserParameter(gdm::iTime);
					!
				}
			}
		}
		Section Define_Tables {
			Procedure procDefineTables_udm {
				Body: {
					/***
					Definition of the datatables that are the specific for User
					Do not add additional properties to existing (generic) data tables 
					but define new tables for these specific properties
					***/
					!Format of command for index(sets) or other identifiers)
					!cdl::procAddTable("Excel sheet name", gdm::spSchemaName, 1);
					!cdl::procAddIndexToTable( "Excel sheet name", 'udm::iIndex', "Excel column name");
					!cdl::procAddIdentifierToTable( "Excell sheet name", 'udm::AIMMSidentifier', "Excel column name");
				}
				Comment: "Defines the table structure in the database / excel files";
			}
			Procedure procDefineTablesResult_udm {
				Body: {
					/***
					Definition of the datatables that are the specific for User
					Do not add additional properties to existing (generic) data tables 
					but define new tables for these specific properties
					***/
					!Format of command for index(sets) or other identifiers)
					!cdl::procAddTable("Excel sheet name", gdm::spSchemaName, 1);
					!cdl::procAddIndexToTable( "Excel sheet name", 'udm::iIndex', "Excel column name");
					!cdl::procAddIdentifierToTable( "Excell sheet name", 'udm::AIMMSidentifier', "Excel column name");
					
					/*
					The tables below should be used as guidance when exporting results to excel.
					User should modify, add or delete section of the code as needed.
					*/
					! Result Node
					cdl::procAddTable("result_objective", gdm::spSchemaName, 1);
					cdl::procAddIdentifierToTable( "result_objective", 'gom::vObjective', "objective");
					
					! Result Energy Contract
					cdl::procAddTable("result_energy_contract", gdm::spSchemaName, 1);
					cdl::procAddIndexToTable("result_energy_contract", 'gdm::iEnergyContract', "node");
					cdl::procAddIndexToTable("result_energy_contract", 'gdm::iTime', "time");
					cdl::procAddIdentifierToTable("result_energy_contract", 'gom::pCostCompressor', "cost_comp");
					cdl::procAddIdentifierToTable("result_energy_contract", 'gom::pCostLiquefier', "cost_lique");
					cdl::procAddIdentifierToTable("result_energy_contract", 'gom::pCostAuxiliary', "cost_auxiliary");
					
					! Result Node
					cdl::procAddTable("result_node", gdm::spSchemaName, 1);
					cdl::procAddIndexToTable( "result_node", 'gdm::iNode', "node");
					cdl::procAddIndexToTable( "result_node", 'gdm::iTime', "time");
					cdl::procAddIdentifierToTable( "result_node", 'gom::vPressure', "pressure");
					cdl::procAddIdentifierToTable( "result_node", 'gom::vInputFlow', "input_flow");
					cdl::procAddIdentifierToTable( "result_node", 'gom::vOutputFlow', "output_flow");
					
					! Result Arc
					cdl::procAddTable("result_arc", gdm::spSchemaName, 1);
					cdl::procAddIndexToTable( "result_arc", 'gdm::iArc', "arc");
					cdl::procAddIndexToTable( "result_arc", 'gdm::iTime', "time");
					cdl::procAddIdentifierToTable( "result_arc", 'gom::vFlow', "flow");
					
					! Result Compressor
					cdl::procAddTable("result_compressor", gdm::spSchemaName, 1);
					cdl::procAddIndexToTable( "result_compressor", 'gdm::iCompressorArc', "compressor");
					cdl::procAddIndexToTable( "result_compressor", 'gdm::iTime', "time");
					cdl::procAddIdentifierToTable( "result_compressor", 'gom::vCompressorPower', "comp_power");
					cdl::procAddIdentifierToTable( "result_compressor", 'gom::vCompressorEfficiency', "comp_eff");
					cdl::procAddIdentifierToTable( "result_compressor", 'gom::v01Compressor', "v01compressor");
					
					! Result Liquefier
					cdl::procAddTable("result_liquefier", gdm::spSchemaName, 1);
					cdl::procAddIndexToTable( "result_liquefier", 'gdm::iLiquefierArc', "liquefier");
					cdl::procAddIndexToTable( "result_liquefier", 'gdm::iTime', "time");
					cdl::procAddIdentifierToTable( "result_liquefier", 'gom::vLiquefierPower', "liq_power");
					cdl::procAddIdentifierToTable( "result_liquefier", 'gom::v01Liquefier', "v01liquefier");
					
					! Result Tank
					cdl::procAddTable("result_tank", gdm::spSchemaName, 1);
					cdl::procAddIndexToTable( "result_tank", 'gdm::iTankNode', "tank");
					cdl::procAddIndexToTable( "result_tank", 'gdm::iTime', "time");
					cdl::procAddIdentifierToTable( "result_tank", 'gom::vTankLevel', "tank_level");
					
					! Result Coldbox
					cdl::procAddTable("result_coldbox", gdm::spSchemaName, 1);
					cdl::procAddIndexToTable( "result_coldbox", 'gdm::iColdbox', "coldbox");
					cdl::procAddIndexToTable( "result_coldbox", 'gdm::iTime', "time");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vInternalLiquid', "internal_liquid");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vRectificationPower', "RP");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vO2Recovery', "O2_Recov");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vArRecovery', "Ar_Recov");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vAirTurbineLp', "turbine_insufflation");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vWaste', "Waste");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vGOxToWaste', "gox_to_Waste");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vAirHp', "airhp");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vAirMp', "airmp");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLpGOx', "lpgox");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vMpGOx', "mpgox");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vHpGOx', "hpgox");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLpGaN', "lpgan");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vMpGaN', "mpgan");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vHpGaN', "hpgan");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLOx', "lox");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLiN', "lin");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLAr', "lar");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLOxAssist', "lox_assist");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLiNAssist', "lin_assist");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLinAsssistColdStandby', "lin_assist_coldstandby");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLpGOxVent', "lpgox_vent");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vMpGOxVent', "mpgox_vent");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vHpGOxVent', "hpgox_vent");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLpGaNVent', "lpgan_vent");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vMpGaNVent', "mpgan_vent");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vHpGaNVent', "hpgan_vent");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLOxPurge', "lox_purge");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLiNPurge', "lin_purge");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::vLArPurge', "lar_purge");
					cdl::procAddIdentifierToTable( "result_coldbox", 'gom::p01Coldbox', "v01coldbox");
					
					! Result Auxiliary Power
					cdl::procAddTable("result_aux_power", gdm::spSchemaName, 1);
					cdl::procAddIndexToTable( "result_aux_power", 'gdm::iAuxPowerGroup', "aux_power_group");
					cdl::procAddIndexToTable( "result_aux_power", 'gdm::iTime', "time");
					cdl::procAddIdentifierToTable( "result_aux_power", 'gom::vAuxPower', "Aux_Power");
					
					! Result Auxiliary Power
					cdl::procAddTable("result_operating_mode", gdm::spSchemaName, 1);
					cdl::procAddIndexToTable( "result_operating_mode", 'gdm::iOperatingModeElement', "switchable_element");
					cdl::procAddIndexToTable( "result_operating_mode", 'gdm::iOperatingMode', "operating_mode");
					cdl::procAddIndexToTable( "result_operating_mode", 'gdm::iTime', "time");
					cdl::procAddIdentifierToTable( "result_operating_mode", 'gom::v01ElementInOperatingMode', "v01element_operating_mode");
				}
			}
		}
		Section Read_write_excel {
			Procedure procReadFromExcelButton_udm {
				Body: {
					! Clear messages
					gdm::procClearMessages;
					
					! Choose the excel file
					if ( fileselect( spExcelFile , extension: "xls*") = 0 ) then return; endif;
					
					! repair for special character string since the string is used in generated code
					spExcelFile := FindReplaceStrings( spExcelFile , "\\" , "\\\\" );
					
					! Define tables step 1
					gdm::procDefineTablesTime1();
					
					!Read from Excel step1 
					if ( cdl::procReadFromExcel( formatstring("%s",spExcelFile ) ) = 0 ) then
						return 0;
					endif;
					
					! change date format for excel
					gdm::procChangeDateFormatExcelRead();
					
					! Define tables step 2
					gdm::procDefineTablesTime2();
					! Define tables user
					udm::procDefineTables_udm();
					
					!Read from Excel step2 
					if ( cdl::procReadFromExcel( formatstring("%s",spExcelFile ) ) ) then
						dialogmessage( "Excel succesfully read");
					endif;
					
					! Save the name of the loaded file
					gdm::spExcelFileDisplay := spExcelFile;
					
					! Call procedure to create the link between excel parameters and time dependent parameters in gom and uom
					gdm::procInitializeTimeDependentData();
					udm::procInitializeTimeDependentData_udm();
					
					! Call the procedure to define the set sControlModeElements
					udm::procControlModeElementSetDefinition_udm();
				}
				StringParameter spExcelFile;
			}
			Procedure procSaveToExcelButton_udm {
				Body: {
					! Update timestamp
					gdm::spRunTimeStamp := CurrentToString( "%c%y-%m-%d %H:%M:%S");
					! Update model vesion
					gdm::spRunModelVersion := gdm::spModelVersion;
					
					! Ask for file to export data to
					if ( fileselectnew( spExcelFile , extension: "xlsx") = 0 ) then return; endif;
					!if ( dialoggetstring( "Enter a name for the file.\n for example \"ASU_data\"", spExcelFile, title: "Enter a file name") = 0 ) then return; endif;
					
					! repair for special character string since the string is used in generated code
					spExcelFile := FindReplaceStrings( spExcelFile , "\\" , "\\\\" );
					
					! First update format for write to excel
					gdm::procChangeDateFormatExcelWrite();
					
					gdm::procDefineTablesTime2();
					
					! Add tables user
					udm::procDefineTables_udm();
					! Add result
					! udm::procDefineTablesResult_udm();
					
					! Export to Excel
					cdl::procWriteToExcel( spExcelFile );
					
					dialogmessage( "Excel succesfully exported");
				}
				StringParameter spExcelFile;
			}
			Procedure procWriteToExcelButton_udm {
				Body: {
					! Update timestamp
					gdm::spRunTimeStamp := CurrentToString( "%c%y-%m-%d %H:%M:%S");
					! Update model vesion
					gdm::spRunModelVersion := gdm::spModelVersion;
					
					! Ask for file to export data to
					if ( fileselectnew( spExcelFile , extension: "xlsx") = 0 ) then return; endif;
					!if ( dialoggetstring( "Enter a name for the file.\n for example \"ASU_data\"", spExcelFile, title: "Enter a file name") = 0 ) then return; endif;
					
					! repair for special character string since the string is used in generated code
					spExcelFile := FindReplaceStrings( spExcelFile , "\\" , "\\\\" );
					
					! First update format for write to excel
					gdm::procChangeDateFormatExcelWrite();
					
					gdm::procDefineTablesTime2();
					
					! Add tables user
					udm::procDefineTables_udm();
					! Add result
					udm::procDefineTablesResult_udm();
					
					! Export to Excel
					cdl::procWriteToExcel( spExcelFile );
					
					dialogmessage( "Excel succesfully exported");
				}
				StringParameter spExcelFile;
			}
		}
		Section Read_write_database {
			Section Declaration_Database_Connection {
				DeclarationSection Database_Connection {
					ElementParameter epSelectedDatabaseType {
						Range: cdl::sDatabaseTypes;
						Definition: {
							
							! ORACLE SQL == MySQL for the purpose of the code
							
							stringToElement( cdl::sDatabaseTypes, "ORACLE SQL" )
						}
					}
					StringParameter spSchemaName {
						Definition: {
							
							!! MODIFICAR
							
							! Name of the schema where the tables are
							! Option 1
							!'core_engine_cartagena' ;
							! Option 2
							!'core_engine_cartagena_2' ;
							
							'core_engine_example';
						}
					}
					StringParameter spConnectionStringWrite;
					Parameter p01InitDataReadOnly {
						Default: 0;
					}
				}
			}
			Procedure procConnectionDataBase_udm {
				Body: {
					
					
					! Define Connection to Database
					
					gdm::spSchemaName := 'core_engine_example'; ! This should be the schema of your database
					udm::procCreateConnectionStringWrite;
					gdm::spConnectionString	:= spConnectionStringWrite;
				}
				Comment: {
					"gdm::procDefineTablesTime2();
					!Read from Database step1 
					if (cdl::procReadFromDatabase(
						epDatabaseType : epSelectedDatabaseType,  
						spConnection   : gdm::spConnectionString, 
						spCase         : gdm::spRun ) = 0 ) then
						return 0;
					endif;"
				}
			}
			Procedure procCreateConnectionStringWrite {
				Body: {
					
					
					!!! MODIFICAR
					! Create connection string between AIMMS and Database
					spConnectionStringWrite := SQLCreateConnectionString(
					DatabaseInterface              :  'odbc',
					DriverName                     :  "MySQL ODBC 5.3 ANSI Driver",   !your ODBC driver
					DatabaseName                   :  spSchemaName , !The path of your database,
					UserId                         :  "root",  ! your user ID
					Password                       :  "MyNewPass",  !your password
					AdditionalConnectionParameters:"") ;
				}
			}
			Procedure procReadDataBase {
				Arguments: (epCase);
				Body: {
					
					! Case (ID tables)
					gdm::spRun := epCase;
					
					! Read from Database step1 
					if (cdl::procReadFromDatabase(
						epDatabaseType : epSelectedDatabaseType,  
						spConnection   : gdm::spConnectionString, 
						spCase         : gdm::spRun ) = 0 ) then
						return 0;
					endif;
				}
				ElementParameter epCase {
					Range: gdm::sCases;
					Property: Input;
				}
			}
			Procedure procReadDataBaseButton_udm {
				Body: {
					
					! Empty all data before reading
					udm::procEmptyAllData_udm;
					
					! Clear messages
					gdm::procClearMessages;
					
					! Create connection and retrieve cases
					procConnectionDataBase_udm;
					
					! Define tables step 1
					gdm::procDefineTablesTime1();
					
					! Read cases from database
					cdl::procGetCasesFromDatabase( epSelectedDatabaseType, gdm::spConnectionString, 'gdm::iCase' );
					
					! Read calendar table from database (first case only)
					udm::procReadDataBase(first(gdm::sCases));
					
					! change date format for excel
					gdm::procChangeDateFormatExcelRead();
					
					! Define tables step 2
					gdm::procDefineTablesTime2();
					
					! Define user specific tables
					procDefineTables_udm();
					
					! Continue reading from database (first case only)
					udm::procReadDataBase(first(gdm::sCases));
					
					! Call procedure to create the link between parameters and time dependent parameters in gom and uom
					gdm::procInitializeTimeDependentData();
					procInitializeTimeDependentData_udm();
				}
			}
			Procedure procWriteDataBaseButton_udm {
				Body: {
					
					/***
					For every scenario, write a subset of the results to
					a specific table on a database.
					***/
					
					! Run Connection String procedure
					procConnectionDataBase_udm;
					
					! Update timestamp
					gdm::spRunTimeStamp := CurrentToString( "%c%y-%m-%d %H:%M");
					
					/*
					   The ID of the case in the database will correspond to the time stamp the writing procedure executes. 
					   User can modify this section to create a different ID for the cases
					*/
					gdm::spRun := gdm::spRunTimeStamp;  
					
					! First update format for writing
					gdm::procChangeDateFormatExcelWrite();
					
					! Generic tables
					gdm::procDefineTablesTime2();
					! User specific tables
					udm::procDefineTables_udm();
					! User specific results to write to database
					udm::procDefineTablesResult_udm();
					
					! Write to database
					cdl::procWriteToDatabase(epSelectedDatabaseType, gdm::spConnectionString, gdm::spRun);
				}
				StringParameter spScenarioLoad;
			}
		}
		Procedure procEmptyAllData_udm {
			Body: {
				! empty all data including ones define in user libraries
				empty UserDataManager;
				gdm::procEmptyAllData;
			}
		}
	}
	Section Data_validation_procedures_udm {
		Procedure procControlModeElementSetDefinition_udm {
			Body: {
				! Define the list of control elements following the type of the elements (ColdBoxes and Arcs with the types : Compressor, Liquefier or Backup)
				! Complete the set if necessary
				gdm::sControlModeElements := { gdm::iArcAndBox | gdm::epArcType( gdm::iArcAndBox ) = gdm::epArcTypeCompressor
								or gdm::epArcType( gdm::iArcAndBox ) = gdm::epArcTypeLiquefier 
								or gdm::epArcType( gdm::iArcAndBox ) = gdm::epArcTypeBackup 
								or gdm::iArcAndBox in gdm::sboxes
								};
			}
		}
	}
}
