## ams_version=1.0

Model Main_ASU_model {
	Procedure MainInitialization {
		Body: {
			! This parameter activate the AIMMS_Pro code included in the solves procedure
			p01ApplicationIsOnAimmsPro:=0;     ! 1=> for the application in aimms pro; 0=> for application in aimms local
			
			! Proc to optimise the display
			odm::procInitialize();
			
			! Define Project Option for the solve
			gom::pMIP_Relative_Optimality_Tolerance := 0.001;
			gom::pTime_Limit := 600;
			gom::procDefineProjectOptim();
		}
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure MainExecution;
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
	Module GMP_Outer_Approximation_Module {
		SourceFile: "%AIMMSMODULES%\\GMPOuterApproximation.ams";
		Comment: {
			"This module contains two outer approximation algorithms for solving Mixed Integer
			Nonlinear Problems (MINLP). The basic algorithm can be found in the section \'AOA
			Basic Algorithm\' and is based on the following two papers:
			
			 M.A. Duran and I.E. Grossmann, An outer-approximation algorithm for a class of
			 mixed-integer nonlinear programs, Mathematical Programming 36 (1986), pp. 307-339.
			
			 J. Viswanathan and I.E. Grossmann, A combined penalty function and outer-approximation
			 method for MINLP optimization, Computers and Chemical Engineering 14 (1990), pp. 769-778.
			
			The basic algorithm can be used for convex and non-convex problems with general integer
			variables.
			
			The section \'AOA Convex Algorithm\' contains a variant of the outer approximation algorithm
			that uses a single tree search. In this way the sequential solving of several MIP\'s is
			avoided. The algorithm is based on the paper:
			
			 I. Quesada and I.E. Grossmann, An LP/NLP Based Branch and Bound Algorithm for Convex MINLP
			 Optimization Problems, Computers and Chemical Engineering 16 (1992), pp. 937-947.
			
			This algorithm can only be used for convex problems (with general integer variables)."
		}
	}
	Module Multi_Start_Module {
		SourceFile: "%AIMMSMODULES%\\MultiStart.ams";
		Comment: {
			"The basic MultiStart algorithm:
			-------------------------------
			
			Input: GMP corresponding to the NLP problem, NumberOfSamplePoints, NumberOfSelectedSamplePoints.
			
			0.      Set IterationCount equal to 1.
			1.      Generate NumberOfSamplePoints sample points from the uniform distribution.
			        Calculate the penalized objective for all sample points and select the best
			        NumberOfSelectedSamplePoints sample points.
			2.      For all sample points (NumberOfSelectedSamplePoints in total) do:
						For all clusters, calculate the distance between the sample point and the center
			        	of the cluster. If the distance is smaller than the radius of the cluster (i.e.,
			        	the sample point belongs to the cluster) then delete the sample point.
			3.      For all (remaining) sample points do:
						Solve the NLP by using the sample point as its starting point to obtain a candidate
						local solution.
			        	For all clusters do:
			        	a.	Calculate the distance between the candidate local solution and the local
			        		solution belonging to the cluster.
			    		b.	If the distance equals 0 (which implies that the candidate local solution is the
			    			same as the local solution belonging to the cluster) then update the center and
			    			radius of the cluster by using the sample point.
			    		c.	Else, construct a new cluster by using the mean of the sample point and the
			    			candidate local solution as its center with radius equal to half the distance
			    			between these two points. Assign the candidate local solution as the local
			    			solution belonging to the cluster.
			    		For all remaining sample points, calculate the distance between the sample point
			    		and the center of the updated or the new cluster. If the distance is smaller
			    		than the radius of the cluster then delete the sample point.
			4.      Increment IterationCount. If the number of iterations exceeds the IterationLimit,
			        then go to step (5). Else go to step (1).
			5.      Order the local solutions and store the NumberOfBestSolutions solutions in the
			        solution repository.
			
			By default, the algorithm uses the starting point as the first \"sample\" point in the first
			iteration.
			
			The algorithm deletes all initial solutions present in the solution repository of the GMP."
		}
	}
	Section GeneralParameters {
		Parameter p01ApplicationIsOnAimmsPro {
			Range: binary;
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: {
				tick->s : #-># / 100,
				minute->s : #-># * 60
			}
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for GMP Outer Approximation Module.
				
				The unit tick has been added automatically because it is a required unit for GMP Outer Approximation Module.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
}
