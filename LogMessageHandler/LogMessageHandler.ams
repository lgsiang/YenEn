## ams_version=1.0

LibraryModule LogMessageHandler {
	Prefix: log_message;
	Interface: {
		data { sLogMessages, spLogMessageType, pLogMessageSeverity, epLogMessageVariant,procInitialize,
		       spLogMessageText, pLogMessageValue, procCleanLogMessages, procLogMessage, 
		       procLogError, procLogWarning, procLogInfo, procDefineTables}
	}
	Comment: {
		"Log functionality for any type of logging to be communicated to the user.
		- Read/write to database"
	}
	Procedure procInitialize {
		Arguments: eplStringCleanupForDatabase;
		Body: {
			epStringCleanupForDatabase := eplStringCleanupForDatabase;
		}
		ElementParameter eplStringCleanupForDatabase {
			Range: AllProcedures;
			Default: 'log_message::procDefault';
			Property: Input;
		}
	}
	Procedure procDefault {
		Arguments: (spText,pLength);
		StringParameter spText {
			Property: InOut;
		}
		Parameter pLength {
			Property: Input;
		}
	}
	DeclarationSection Settings {
		ElementParameter epStringCleanupForDatabase {
			Range: AllProcedures;
			Default: 'log_message::procDefault';
		}
	}
	Section Log_Message_to_Client;
	Section Log_Messages_Data {
		Set sVariants;
		Set sLogMessages {
			SubsetOf: Integers;
			Index: iLogMessage;
			Comment: "Auto id for the log messages";
		}
		StringParameter spLogMessageType {
			IndexDomain: iLogMessage;
			Comment: "Type of log message - Typically the Error / Warning or the Source of the message (solver / data cleaner / ..)";
		}
		Parameter pLogMessageSeverity {
			IndexDomain: iLogMessage;
			Default: 0;
			Comment: {
				"Level of the message 1 to show on main screen,
				2 for details
				3 even less important.
				The lower the number the more important it is!"
			}
		}
		ElementParameter epLogMessageVariant {
			IndexDomain: iLogMessage;
			Range: sVariants;
			Comment: {
				"Some log messages apply only to specific variants.
				Shown differently on the OCC Screen"
			}
		}
		StringParameter spLogMessageText {
			IndexDomain: iLogMessage;
			Comment: "Text message";
		}
		Parameter pLogMessageValue {
			IndexDomain: iLogMessage;
			Comment: "To be able to store a value related to the log message, e.g., the solver time";
		}
		Procedure procDefineTables {
			Body: {
				cdl::procAddTable( "log_messages", gdm::spSchemaName, 1 );
				cdl::procAddIndexToTable( "log_messages", 'log_message::iLogMessage', "log_message");
				cdl::procAddIdentifierToTable( "log_messages", 'log_message::spLogMessageType', "type");
				cdl::procAddIdentifierToTable( "log_messages", 'log_message::pLogMessageSeverity', "severity");
				cdl::procAddIdentifierToTable( "log_messages", 'log_message::epLogMessageVariant', "variant");
				cdl::procAddIdentifierToTable( "log_messages", 'log_message::spLogMessageText', "text");
				cdl::procAddIdentifierToTable( "log_messages", 'log_message::pLogMessageValue', "value");
			}
			Comment: "Defines the table structure in the database / excel files";
		}
	}
	Section Log_Message_Handler {
		Procedure procCleanLogMessages {
			Arguments: (p01ExcludingScada);
			Body: {
				!Clear all data
				while ( Exists( iLogMessage  | p01ExcludingScada = 0 or spLogMessageType(iLogMessage) <> "SCADA" ) )
				do
					epLogMessage := first( iLogMessage  | p01ExcludingScada = 0 or spLogMessageType(iLogMessage) <> "SCADA" ) ;
				
					spLogMessageType(epLogMessage) 		:= "";
					pLogMessageSeverity(epLogMessage)	:= 0;
					epLogMessageVariant(epLogMessage)	:= '';
					spLogMessageText(epLogMessage) 		:= "";
					pLogMessageValue(epLogMessage)		:= 0;
				
					sLogMessages -= epLogMessage;
				endwhile;
			}
			Comment: "Clears all log messages in the datamanager";
			Parameter p01ExcludingScada {
				Range: binary;
				Property: Input;
				Comment: "1 to clear all log messages except the scada types";
			}
			ElementParameter epLogMessage {
				Range: sLogMessages;
			}
		}
		Procedure procLogMessage {
			Arguments: {
				(splLogMessageType,plLogMessageSeverity,splLogMessageSolutionVariant,splLogMessageText,
				 plLogMessageValue)
			}
			Body: {
				if( epStringCleanupForDatabase <> '' )
				then
					apply( epStringCleanupForDatabase, splLogMessageText, 800);
				endif;
				
				!Create a new message id
				setElementAdd( sLogMessages, eplNewMessageId,
					formatstring( "%n",
						max(1,max(iLogMessage,val(iLogMessage))+1) !Either 0 or the next int
						)
					);
				
				!Store the message and properties
				spLogMessageType( eplNewMessageId ) 	:= splLogMessageType;
				pLogMessageSeverity( eplNewMessageId ) 	:= plLogMessageSeverity;
				epLogMessageVariant( eplNewMessageId )	:= stringToElement( sVariants, splLogMessageSolutionVariant, Create: 1);
				spLogMessageText( eplNewMessageId ) 	:= splLogMessageText;
				pLogMessageValue( eplNewMessageId )	:= plLogMessageValue;
			}
			Comment: "add a generic log message";
			StringParameter splLogMessageType {
				Property: Input;
				Comment: "Type of message";
			}
			StringParameter splLogMessageText {
				Property: Input;
				Comment: "message";
			}
			Parameter plLogMessageSeverity {
				Range: integer;
				Property: Input;
				Comment: "Severity of message";
			}
			ElementParameter eplNewMessageId {
				Range: sLogMessages;
				Comment: "Automatic generated message id";
			}
			StringParameter splLogMessageSolutionVariant {
				Property: Input;
			}
			Parameter plLogMessageValue {
				Property: Input;
			}
		}
	}
	Section Log_Message_Helpers {
		Procedure procLogError {
			Arguments: (pLogMessageSeverity,spLogMessageSolutionVariant,spLogMessageText);
			Body: {
				procLogMessage(
					splLogMessageType :  "Error",
					plLogMessageSeverity : pLogMessageSeverity,
					splLogMessageSolutionVariant : spLogMessageSolutionVariant,
					splLogMessageText :  spLogMessageText,
					plLogMessageValue : 0
					);
			}
			Comment: "Add an error";
			StringParameter spLogMessageText {
				Property: Input;
				Comment: "message";
			}
			StringParameter spLogMessageSolutionVariant {
				Property: Input;
			}
			Parameter pLogMessageSeverity {
				Property: Input;
			}
		}
		Procedure procLogInfo {
			Arguments: (spLogMessageSolutionVariant,spLogMessageText);
			Body: {
				procLogMessage(
					splLogMessageType :  "Info",
					plLogMessageSeverity : 0,
					splLogMessageSolutionVariant : spLogMessageSolutionVariant,
					splLogMessageText :  spLogMessageText,
					plLogMessageValue : 0
					);
			}
			Comment: "Add an error";
			StringParameter spLogMessageText {
				Property: Input;
				Comment: "message";
			}
			StringParameter spLogMessageSolutionVariant {
				Property: Input;
			}
		}
		Procedure procLogWarning {
			Arguments: (pLogMessageSeverity,spLogMessageSolutionVariant,spLogMessageText);
			Body: {
				procLogMessage(
					splLogMessageType :  "Warning",
					plLogMessageSeverity : pLogMessageSeverity,
					splLogMessageSolutionVariant : spLogMessageSolutionVariant,
					splLogMessageText :  spLogMessageText,
					plLogMessageValue : 0
					);
			}
			Comment: "add a warning";
			Parameter pLogMessageSeverity {
				Range: integer;
				Property: Input;
				Comment: "message severity level";
			}
			StringParameter spLogMessageText {
				Property: Input;
				Comment: "message";
			}
			StringParameter spLogMessageSolutionVariant {
				Property: Input;
			}
		}
		Procedure procLogSolver {
			Arguments: (pLogMessageSeverity,spLogMessageSolutionVariant,spLogMessageText);
			Body: {
				procLogMessage(
					splLogMessageType :  "Solver",
					plLogMessageSeverity : pLogMessageSeverity,
					splLogMessageSolutionVariant : spLogMessageSolutionVariant,
					splLogMessageText :  spLogMessageText,
					plLogMessageValue : 0
					);
			}
			Comment: "add a solver log";
			Parameter pLogMessageSeverity {
				Range: integer;
				Property: Input;
				Comment: "message severity";
			}
			StringParameter spLogMessageText {
				Property: Input;
				Comment: "message";
			}
			StringParameter spLogMessageSolutionVariant {
				Property: Input;
			}
		}
	}
	Section Unit_Test {
		Procedure procTestLogHandler {
			Body: {
				procLogMessage(
					splLogMessageType :  "Error",
					plLogMessageSeverity : 1,
					splLogMessageSolutionVariant : '',
					splLogMessageText :  "x",
					plLogMessageValue : 0
					);
				
				procLogMessage(
					splLogMessageType :  "Warning",
					plLogMessageSeverity : 2,
					splLogMessageSolutionVariant : '',
					splLogMessageText :  "y",
					plLogMessageValue : 0
					);
			}
			Comment: "for testing only";
		}
	}
}
